<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[beforeload]]></title>
  <subtitle><![CDATA[对编程世界充满激情的少年]]></subtitle>
  <link href="http://beforeload.github.io/atom.xml" rel="self"/>
  <link href="http://beforeload.github.io"/>
  <updated>2014-04-12T09:39:46.720Z</updated>
  <id>http://beforeload.github.io/</id>
  <author>
    <name><![CDATA[beforeload]]></name>
    <email><![CDATA[fe.daniel91@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[the Introduction and Structure of Operating System]]></title>
    <link href="http://beforeload.github.io/2014/03/12/the-introduction-and-structure-of-operating-system/"/>
    <id>http://beforeload.github.io/2014/03/12/the-introduction-and-structure-of-operating-system/</id>
    <published>2014-03-11T17:09:47.000Z</published>
    <updated>2014-03-11T17:21:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="操作系统（一）">操作系统（一）</h1>
<p>最近准备重新构建自己的知识体系，先从操作系统开始,把知识点理一下。</p>
<a id="more"></a>

<h2 id="绪论">绪论</h2>
<img src="http://i.imgur.com/WifnF1e.png" class="introduction" title="[title [alt 操作系统绪论]]">


<h3 id="笔记补充：">笔记补充：</h3>
<ol>
<li>通道: 独立于CPU运行，并行操作</li>
<li>多道程序设计技术: (批处理系统)主存中存放多道独立程序</li>
<li>分时技术: 时间片</li>
</ol>
<h2 id="组织结构">组织结构</h2>
<img src="http://i.imgur.com/hMZCcHP.png" class="structure" title="[title [alt 操作系统组织结构]]">


<h3 id="笔记补充">笔记补充</h3>
<ol>
<li>管态(系统态): 管理程序运行状态</li>
<li>用户态(目态): 禁用特权命令，访问区域受限</li>
<li>中断概念: 事件发生 系统终止程序运行 引导处理程序处理 处理完返回断点 继续执行</li>
<li>中断进入: 硬件负责中断进入过程，发现和响应中断请求，引出中断处理程序。软件中断处理程序完成</li>
<li>中断分析，中断处理，恢复恢复被中断程序的现场等工作。</li>
<li>程序状态字: 反应运行状态</li>
<li>中断响应: 交换指令执行地址和处理器状态</li>
<li>向量中断: 由中断源引导处理机进入中断服务程序的中断过程</li>
<li>中断向量:<ul>
<li>中断服务例程入口地址</li>
<li>服务程序所用的处理器状态字</li>
</ul>
</li>
<li>软件中断处理过程:<ul>
<li>保护现场和传递参数</li>
<li>执行相应的中断(自陷)服务例程</li>
<li>恢复和退出中断</li>
</ul>
</li>
<li>硬件故障中断处理: 人为排除故障</li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Operating System/" term="Operating System"/>
    <category scheme="http://beforeload.github.io/categories/Operating System/" term="Operating System"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[New Year New Start]]></title>
    <link href="http://beforeload.github.io/2014/02/16/new-year-new-start/"/>
    <id>http://beforeload.github.io/2014/02/16/new-year-new-start/</id>
    <published>2014-02-16T15:45:11.000Z</published>
    <updated>2014-02-16T16:15:13.000Z</updated>
    <content type="html"><![CDATA[<h1 id="新的一年，新的开始">新的一年，新的开始</h1>
<p>过去的一年没有好好的去学习技术，也没有好好的看看书，精通一门技术。</p>
<a id="more"></a>

<p>2014年，在技术上，我有三个目标：</p>
<ol>
<li>Node.js开发，掌握JavaScript，能够使用前端的MV*框架开发web应用。</li>
<li>在算法上，我的目标是锻炼自己的编程能力，能够在常见问题上给出解决方案。</li>
<li>在机器学习上，我希望多掌握一点理论，能够解决常见的机器学习上的问题。</li>
</ol>
<p>不管以后从事什么方向的开发也好，趁现在年轻还有时间可以多学点。（是不是只有处女座，才有选择困难症啊！）</p>
<p>为了实现我的目标，制定一下简要的计划：</p>
<ol>
<li>Node.js以及前端方面，一边学习，一边尝试着进行一些应用开发，项目是锻炼技术的捷径，最好每天都有项目写，至少每个月完成一个小项目。</li>
<li>算法上，积极参与一些网上的比赛，例如codeforces,topcode，至少每两周参加一次。</li>
<li>机器学习上，目前为止还没有去尝试过，希望能够多看看书，多写写博客总结一下吧。</li>
<li>读书方面，希望能够每天都读一点书，每个月至少精读一本，粗读一本。</li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Memory/" term="Memory"/>
    <category scheme="http://beforeload.github.io/categories/Memory/" term="Memory"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Closure of JavaScript]]></title>
    <link href="http://beforeload.github.io/2014/01/03/closure-of-javascript/"/>
    <id>http://beforeload.github.io/2014/01/03/closure-of-javascript/</id>
    <published>2014-01-03T14:17:17.000Z</published>
    <updated>2014-01-03T16:09:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="JavaScript_中的闭包">JavaScript 中的闭包</h1>
<p>最近被人问到JavaScript中闭包的作用，无意中回忆起很久之前实习面试的时候也被问过类似的问题，想起在写JS中遇到的一些习惯性的问题，写篇博客总结一下。</p>
<a id="more"></a>

<h2 id="先了解什么是作用域">先了解什么是作用域</h2>
<p>我感觉很多JS开发人员在对作用域的了解上都存在错误，虽然JavaScript是一种类C 的语言，但它并不支持块级作用域，块级作用域是定义在代码块中的变量在代码块执行结束后会被释放掉。</p>
<p>在JavaScript中，则是通过函数作用域的方式，函数中的参数和变量在函数外不可见，而函数内自由使用，即内部任意位置定义的变量在函数内部任何地方都可见，当然定义变量时，请用var。为了避免块级作用域可能产生的问题，可以在函数体的顶部声明函数可能用到的所有变量。这也是很多前端开发人员的一个很好的习惯。</p>
<h2 id="闭包的产生">闭包的产生</h2>
<p>根据上面对作用域的描述，函数体内部可以访问外部函数的参数和变量（当然不包括this和arguments），这也叫做链式作用域(chain scope)。理解了作用域，闭包就变得很好理解了，我觉得可以这样简单的去理解它：一个定义在函数内部的函数，它可以访问创建时所处的上下文环境。这是最浅显的理解，当然它的作用远不止这些。</p>
<h2 id="闭包的作用">闭包的作用</h2>
<p>一个闭包最重要的作用不仅仅是可以读取函数内部的变量，更让人惊喜的是，<em>只要内部函数需要</em>，这些变量的值在内存中会一直存在。可以在控制台中写个简单的例子来演示它：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre>var <span class="built_in">add</span>
<span class="function"><span class="keyword">function</span> <span class="title">a</span>() {</span>
    var x = <span class="number">1</span>
    <span class="built_in">add</span> = <span class="function"><span class="keyword">function</span> () {</span>
        x += <span class="number">1</span>
    }

    <span class="function"><span class="keyword">function</span> <span class="title">b</span>() {</span>
        console.<span class="built_in">log</span>(x)
    }
    <span class="constant">return</span> b
}

var <span class="built_in">result</span> = <span class="operator">a</span>()
<span class="built_in">result</span>()<span class="comment"> // 1</span>
<span class="built_in">add</span>()
<span class="built_in">result</span>()<span class="comment"> // 2</span>
</pre></td></tr></table></figure>

<p>值得注意的是上面的例子中有两个闭包，add是一个匿名函数，也是一个闭包，它在函数外部定义，却在操作函数内部的变量。result是闭包b的函数，两次运行的值不同表示x值在内存中一直保存着，a调用结束后，x没有被回收。</p>
<p>如果上面例子理解有困难，那我们来简化它：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> x = <span class="number">1</span>
    <span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">()</span> {</span>
        x += <span class="number">1</span>
        console.log(x)
    }
    <span class="keyword">return</span> b  <span class="comment">// 注意，这个地方非常重要</span>
}
<span class="keyword">var</span> s = a()
s() <span class="comment">// 2</span>
s() <span class="comment">// 3</span>
</pre></td></tr></table></figure>

<p>现在只有一个闭包函数，这下子可以一眼看出来了吧。函数b嵌套在函数a内，函数a返回函数b。当函数b在函数a外部的一个变量引用时，就产生了闭包。</p>
<p>当然，由于长期保存在内存中不能释放，很多人也会遇到JavaScript内存泄露的问题(IE中)，这需要我们小心的使用闭包。有经验的前端工程师给出的建议是在推出函数之前，删除不使用的局部定义的变量。</p>
<h2 id="理解闭包">理解闭包</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">var</span> name = <span class="string">"The Window"</span>
<span class="keyword">var</span> object = {
    name: <span class="string">"My Object"</span>,   
    getNameFunc: <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>   
        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>   
            <span class="keyword">return</span> <span class="keyword">this</span>.name
        }   
    }   
}
console.log(object.getNameFunc()())
</pre></td></tr></table></figure>

<p>猜猜结果会是什么？<br>答案是：”The Window”</p>
<p>很显然，闭包函数在<code>getNameFunc</code>函数外部被调用，那么<code>this</code>就不指向<code>object</code>对象，而指向了全局的<code>window</code>，所以最后的结果是<code>window.name</code>，也就是”The Window”</p>
<p>通过闭包，我们可以很显然的观察到函数的<em>定义</em>和<em>执行</em>过程。使用闭包，一方面可以保护函数内变量的安全，实现私有属性和私有方法的作用，另一方面可以在内存中保持一个变量。</p>
<h2 id="JS中的GC机制">JS中的GC机制</h2>
<p>这里延伸一点，解释一下为什么产生闭包时，内部函数会比外部函数拥有更长的生命周期。这是由JS中的GC机制决定的。</p>
<p>在JavaScript中，如果一个对象不再被引用，那么这个对象就被GC回收。如果两个对象相互引用，但不会被第三个对象引用时，这两个对象都会被回收。但是，如果函数a被b引用，b又被函数a外的c引用，这样函数a执行完之后，却不会被回收了。</p>
<p>写在最后的话：关于闭包的东西远远不止这些，使用方式也复杂多样，但是万变不离其宗，理解它的机制可以帮助我们写出更加高效优雅的代码。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/JavaScript/" term="JavaScript"/>
    <category scheme="http://beforeload.github.io/categories/JavaScript/" term="JavaScript"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Vim Powerline installation on Ubuntu 13.10]]></title>
    <link href="http://beforeload.github.io/2014/01/02/vim-powerline-installation-on-ubuntu-1310/"/>
    <id>http://beforeload.github.io/2014/01/02/vim-powerline-installation-on-ubuntu-1310/</id>
    <published>2014-01-02T04:53:58.000Z</published>
    <updated>2014-01-02T07:38:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="在Ubuntu_13-10上安装vim-powerline">在Ubuntu 13.10上安装vim-powerline</h1>
<p> 最近又重装了一次ubuntu，发现在ubuntu上每次都要去找<code>vim-powerline</code>的安装及配置太麻烦，而Ubuntu上的字体每次都需要使用fontpather打一次补丁，不然<code>let g:Powerline_symbols = &#39;fancy&#39;</code>没有效果，下面的箭头无法显示出来。所以整理这篇博客，记录配置过程的一些问题和解决方法。</p>
<img src="http://i.stack.imgur.com/T6APG.png" title="Vim Powerline Normal">

<img src="http://i.stack.imgur.com/4R3XS.png" title="Vim Powerline Insert">

<img src="http://i.stack.imgur.com/VTB31.png" title="Vim Powerline Visual">

<img src="http://i.stack.imgur.com/HhgMo.png" title="Vim Powerline Replace">


<a id="more"></a>

<h2 id="一、安装Powerline">一、安装Powerline</h2>
<ol>
<li>首先安装python-pip和git:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sudo apt<span class="attribute">-get</span> install python<span class="attribute">-pip</span> git
</pre></td></tr></table></figure>

<ol>
<li>安装Powerline</li>
</ol>
<p>分两种情况：<br>1) 对于个人用户</p>
<p>在控制台中运行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>pip install --user git+git:<span class="comment">//github.com/Lokaltog/powerline</span>
</pre></td></tr></table></figure>

<p>修改<code>~/.profile</code>，将<code>~/.local/bin</code>加到<code>$PATH</code>中，在末尾加上：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">if</span> [ <span class="operator">-d</span> <span class="string">"<span class="variable">$HOME</span>/.local/bin"</span> ]; <span class="keyword">then</span>
    PATH=<span class="string">"<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>"</span>
<span class="keyword">fi</span>
</pre></td></tr></table></figure>

<p>2) 对于系统用户</p>
<p>在控制台中运行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>su <span class="attribute">-c</span> <span class="string">'pip install git+git://github.com/Lokaltog/powerline'</span>
</pre></td></tr></table></figure>

<h2 id="二、字体的安装">二、字体的安装</h2>
<p>对于Ubuntu的用户来说，安装字体再简单不过了，只需要双击文件，点击Install即可。这里不在赘述。</p>
<p>不过，我发现从<a href="https://github.com/Lokaltog/powerline-fonts" target="_blank">powerline-fonts</a>上下载的字体不能直接用，还是需要配置，配置过程如下：</p>
<ol>
<li>Fontconfig：(推荐)</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>sudo apt<span class="attribute">-get</span> install fontforge python<span class="attribute">-fontforge</span>
</pre></td></tr></table></figure>

<p>1) 对于个人用户</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>mkdir -p ~/<span class="preprocessor">.fonts</span>/ && cd ~/<span class="preprocessor">.fonts</span>/
wget https://github<span class="preprocessor">.com</span>/Lokaltog/powerline/raw/develop/font/PowerlineSymbols<span class="preprocessor">.otf</span> 
wget https://raw<span class="preprocessor">.github</span><span class="preprocessor">.com</span>/Lokaltog/powerline-fonts/master/SourceCodePro/Sauce%<span class="number">20</span>Code%<span class="number">20</span>Powerline%<span class="number">20</span>Black<span class="preprocessor">.otf</span>
~/<span class="preprocessor">.vim</span>/bundle/vim-powerline/fontpatcher/fontpatcher *<span class="preprocessor">.otf</span>
mkdir -p ~/<span class="preprocessor">.config</span>/fontconfig/conf<span class="preprocessor">.d</span>/ cd ~/<span class="preprocessor">.config</span>/fontconfig/conf<span class="preprocessor">.d</span>/ 
wget https://github<span class="preprocessor">.com</span>/Lokaltog/powerline/raw/develop/font/<span class="number">10</span>-powerline-symbols<span class="preprocessor">.conf</span>
fc-cache -vf ~/<span class="preprocessor">.fonts</span>
</pre></td></tr></table></figure>

<p>2) 对于系统用户</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>wget https://github<span class="preprocessor">.com</span>/Lokaltog/powerline/raw/develop/font/PowerlineSymbols<span class="preprocessor">.otf</span>
wget https://raw<span class="preprocessor">.github</span><span class="preprocessor">.com</span>/Lokaltog/powerline-fonts/master/SourceCodePro/Sauce%<span class="number">20</span>Code%<span class="number">20</span>Powerline%<span class="number">20</span>Black<span class="preprocessor">.otf</span>
wget https://github<span class="preprocessor">.com</span>/Lokaltog/powerline/raw/develop/font/<span class="number">10</span>-powerline-symbols<span class="preprocessor">.conf</span>
/etc/vim/bundle/vim-powerline/fontpatcher/fontpatcher *<span class="preprocessor">.otf</span>
sudo mv *<span class="preprocessor">.otf</span> /usr/share/fonts/
sudo fc-cache -vf
sudo mv <span class="number">10</span>-powerline-symbols<span class="preprocessor">.conf</span> /etc/fonts/conf<span class="preprocessor">.d</span>/
</pre></td></tr></table></figure>

<p>如果嫌麻烦，后面有我的打过补丁的字体可以直接下载使用。</p>
<h2 id="三、配置-vimrc">三、配置.vimrc</h2>
<ol>
<li>Vim状态栏的配置</li>
</ol>
<p>在<code>~/.vimrc</code>或者<code>/etc/vim/vimrc</code>文件中进行配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="built_in">set</span> encoding<span class="subst">=</span>utf<span class="subst">-</span><span class="number">8</span>
<span class="built_in">set</span> fillchars<span class="subst">+=</span>stl:<span class="subst">\</span> ,stlnc:<span class="subst">\</span>
<span class="built_in">set</span> laststatus<span class="subst">=</span><span class="number">2</span>
<span class="built_in">set</span> rtp<span class="subst">+=</span><span class="variable">$HOME</span><span class="subst">/</span><span class="built_in">.</span><span class="built_in">local</span>/lib/python2<span class="number">.7</span>/site<span class="attribute">-packages</span>/powerline/bindings/vim<span class="subst">/</span>
<span class="built_in">set</span> <span class="attribute">-g</span> default<span class="attribute">-terminal</span> <span class="string">"screen-256color"</span>
<span class="built_in">set</span> t_Co<span class="subst">=</span><span class="number">256</span>
<span class="keyword">let</span> g:Powerline_symbols <span class="subst">=</span> <span class="string">'fancy'</span>
</pre></td></tr></table></figure>

<p>后面附上我的vimrc相关配置。</p>
<h2 id="四、卸载">四、卸载</h2>
<p>1) 对于个人用户：</p>
<pre><code>pip uninstall powerline
</code></pre><p>2) 对于系统用户：</p>
<pre><code>su <span class="attribute">-c</span> <span class="string">'pip uninstall powerline'</span>
</code></pre><h3 id="附上我的字体配置文件">附上我的字体配置文件</h3>
<ol>
<li><a href="https://github.com/beforeload/dotfiles/tree/master/fonts" target="_blank">字体</a></li>
<li><a href="https://raw.github.com/beforeload/dotfiles/master/.vimrc" target="_blank">.vimrc</a></li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/tags/Vim/" term="Vim"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Introduction to Machine Learning]]></title>
    <link href="http://beforeload.github.io/2013/10/19/introduction-to-machine-learning/"/>
    <id>http://beforeload.github.io/2013/10/19/introduction-to-machine-learning/</id>
    <published>2013-10-19T12:25:13.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="机器学习简介">机器学习简介</h2>
<h3 id="一、定义">一、定义</h3>
<blockquote>
<p>Arthur Samuel (1959): Machine Learning: Field of study that gives computers the ability to learn without being explicitly programmed.<br>Tom Mitchell (1998) : Well-posed Learning Problem: A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</p>
</blockquote>
<a id="more"></a>

<p>个人理解，一句话就是不通过明确的编程让机器具有学习能力，以垃圾邮件为例：</p>
<ol>
<li>邮件分为垃圾邮件和非垃圾邮件为任务T；</li>
<li>查看哪些邮件被标记为垃圾邮件，以及哪些标记为非垃圾邮件是经验E；</li>
<li>正确识别垃圾邮件或非垃圾邮件比例（或数量）为P。</li>
</ol>
<h3 id="二、机器学习算法的类型">二、机器学习算法的类型</h3>
<p>(1) 监督学习(Supervised learning)</p>
<ol>
<li>概念： 通过生成一个函数将输入映射为一个合适的输出（通常也称为标记，多数情况下训练集都是有人工专家标注生成的）。</li>
<li>理解： 通过分好类的输入，模拟出一个函数，以预测相应的结果产生的概率。</li>
<li>问题： 分类问题（Classification）和回归问题（Regression）<ul>
<li>分类问题： 离散型（如预测乳腺癌良性、恶性还有预测明天下午5点会不会下雨），预测的离散输出值(0, 1)。</li>
<li>回归问题： 连续型（如预测房屋价格），预测结果为连续的输出值。</li>
</ul>
</li>
<li>案例：<ul>
<li>Given genetic (DNA) data from a person, predict the odds of him/her developing diabetes over the next 10 years.</li>
<li>Given 50 articles written by male authors, and 50 articles written by female authors, learn to predict the gender of a new manuscript’s author (when the identity of this author is unknown).</li>
</ul>
</li>
</ol>
<p>(2) 无监督学习(Unsupervised learning)</p>
<ol>
<li>概念： 与有监督学习相比，训练集没有人为标注的结果。</li>
<li>理解： 对输入的训练集没有进行标注，即不告诉你分类情况，让机器自己进行相应的分类，即无监督学习常见算法聚类。</li>
<li>案例： Google News， 基因序列分析，社会网络分析，市场切分等。</li>
<li>特别的例子： 鸡尾酒宴会。<ul>
<li>鸡尾酒问题算法： [W,s,v] = svd((repmat(sum(x.<em>x,1),size(x,1),1).</em>x)*x’);</li>
</ul>
</li>
</ol>
<p>(3) 半监督学习</p>
<p>介于监督学习与无监督学习之间。</p>
<p>(4) 强化学习(Reinforcement learning)</p>
<p>通过观察来学习如何做出动作，每个动作都会对环境有所影响，而环境的反馈又可以引导该学习算法。</p>
<p>(5) 其他</p>
<p>还有其他包括推荐系统，Transduction，Learning to learn等类型。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Machine Learning/" term="Machine Learning"/>
    <category scheme="http://beforeload.github.io/categories/Machine Learning/" term="Machine Learning"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Install JBPM 5.4]]></title>
    <link href="http://beforeload.github.io/2013/09/03/install-jbpm54/"/>
    <id>http://beforeload.github.io/2013/09/03/install-jbpm54/</id>
    <published>2013-09-03T14:49:38.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="JBPM5-4环境搭建">JBPM5.4环境搭建</h2>
<h3 id="Step_1:_准备工作">Step 1: 准备工作</h3>
<ol>
<li>下载JDK，安装配置Java环境</li>
<li>下载Ant，配置Java自动化脚本引擎</li>
</ol>
<a id="more"></a>

<p><strong>备注:</strong></p>
<ol>
<li>Linux的JDK安装可以参考我的另外<a href="http://beforeload.github.io/2013/06/29/building-distributed-systems-development-environment/">一篇博文</a></li>
<li>Windows的安装可以参考<a href="http://www.cnitblog.com/intrl/archive/2009/04/11/56254.aspx" target="_blank">这里</a></li>
</ol>
<h3 id="Step_2:_下载JBPM_5-4安装相关开发工具">Step 2: 下载JBPM 5.4安装相关开发工具</h3>
<ol>
<li>下载<a href="http://softlayer-dal.dl.sourceforge.net/project/jbpm/jBPM%205/jbpm-5.4.0.Final/jbpm-5.4.0.Final-installer-full.zip" target="_blank">jbpm-5.4.0.Final-installer-full.zip</a></li>
<li><p>解压缩，从控制台(Windows用户是command)进入相应文件夹下，然后输入命令</p>
<p> ant install.demo</p>
</li>
</ol>
<p>这个过程是下载Eclipse, Jboss等工具，自动化构建开发环境。</p>
<p>备注： 之所以选择这样的构建方式，是因为不想在环境搭建上浪费太多时间，以便拥有更多的时间投入JBPM5的学习开发过程中。</p>
<h3 id="Step_3:_测试环境是否搭建成功">Step 3: 测试环境是否搭建成功</h3>
<ol>
<li><p>启动JBPM</p>
<p> ant start.demo</p>
</li>
</ol>
<p>在控制中可以看到相关的启动情况，会看到自动化的启动了若干组件。</p>
<ol>
<li>重点是测试JBoss启动</li>
</ol>
<p>在控制台输入<a href="http://localhost:8080/，会看到Jboss启动的情况，大致应该如下所示：" target="_blank">http://localhost:8080/，会看到Jboss启动的情况，大致应该如下所示：</a></p>
<img src="http://i.minus.com/iHKyfjT9AxDg8.png">


<ol>
<li>Web管理控制台</li>
</ol>
<p>打开浏览器，输入<a href="http://localhost:8080/jbpm-console，重点看一下" target="_blank">http://localhost:8080/jbpm-console，重点看一下</a></p>
<p>登录的用户名、密码均为krisv </p>
<ol>
<li>使用Guvnor仓库和设计 </li>
</ol>
<p>输入如下地址可以进入</p>
<p><a href="http://localhost:8080/drools-guvnor" target="_blank">http://localhost:8080/drools-guvnor</a></p>
<p>最后，视频演示请戳<a href="http://people.redhat.com/kverlaen/install-gwt-console-jbpm.swf" target="_blank">这里</a></p>
<h3 id="参考博文：">参考博文：</h3>
<ol>
<li><a href="http://wanglu271991027.iteye.com/blog/1495799" target="_blank">jbpm5.2学习———安装与配置</a></li>
<li><a href="http://www.cnblogs.com/skyme/archive/2011/11/07/2238782.html" target="_blank">JBPM5.1的介绍</a></li>
<li><a href="http://w26.iteye.com/blog/998431" target="_blank">jBPM5 入门</a></li>
<li><a href="http://blog.chinaunix.net/uid-122937-id-3731868.html" target="_blank">Jbpm5安装</a></li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/tags/Ubuntu/" term="Ubuntu"/>
    <category scheme="http://beforeload.github.io/tags/Java/" term="Java"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[The Fundamentals Knowledge of Python]]></title>
    <link href="http://beforeload.github.io/2013/08/20/the-fundamentals-knowledge-of-python/"/>
    <id>http://beforeload.github.io/2013/08/20/the-fundamentals-knowledge-of-python/</id>
    <published>2013-08-19T18:19:22.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Python_基础知识">Python 基础知识</h2>
<p>简介：这是对Coursera上的<a href="https://class.coursera.org/programming1-002/class" target="_blank">Learn to Program: The Fundamentals</a>第一周课程的一次总结。 </p>
<p><a id="more"></a></p>
<blockquote>
<p>第一点： 作为计算器使用</p>
</blockquote>
<ol>
<li>加减乘除和其他语言的运算符号相同；</li>
<li>两个符号<ul>
<li>// 整除符号(可对应模除符号 % 记忆)</li>
<li>** 求幂(乘方)</li>
</ul>
</li>
<li>两种数据类型<ul>
<li>int: 整型</li>
<li>float: 浮点型（近似数）</li>
</ul>
</li>
<li>符号优先级<ul>
<li>**最高</li>
<li>-负数</li>
<li>*,/,//,%</li>
<li>+,- 加减运算</li>
</ul>
</li>
<li>语法和语义</li>
<li>错误<ul>
<li>例如输入<code>3) + 2 * 4</code>， 执行时会报出语法错误(SyntaxError)</li>
<li>例如输入<code>89.0 / 0</code>， 执行时会报<code>ZeroDivisionError: float division by zero</code></li>
</ul>
</li>
</ol>
<blockquote>
<p>第二点： Python 和计算机内存</p>
</blockquote>
<p><strong>计算机内存：</strong></p>
<p>  计算机内存中，内存地址指向存储的数据。我们会在地址前加上前缀’id’（例如，id201代表内存地址201）。备注：Python中可以通过id方法去查看内存地址，该方法返回一个整型数。help(id)</p>
<p>在内存中，变量是存储值的一种方法。变量命名指代的是内存中的地址，Python在相对于值之外的一个独立的list中存储变量。一个变量容纳内存中的地址，而这个地址容纳对应的值(value)。因此，这个变量映射到这个值。</p>
<p><strong>术语:</strong></p>
<ol>
<li>A value has a memory address. 一个值有一个内存地址</li>
<li>A variable contains a memory address. 一个变量容纳一个内存地址</li>
<li>A variable refers to a value.一个变量映射一个值</li>
<li>A variable points to a value.一个变量指向一个值</li>
</ol>
<blockquote>
<p>第三点： 变量</p>
</blockquote>
<pre><code><span class="attribute">variable </span>=<span class="string"> expression</span>
</code></pre><p><strong>赋值语句：</strong></p>
<p>执行赋值语句的规则是：</p>
<ol>
<li>执行表达式，它会产生一个内存地址；</li>
<li>存储内存地址到一个变量。</li>
</ol>
<p><strong>变量名：</strong></p>
<p>Python合法的变量名规则是：</p>
<ol>
<li>名字以字母或_开头；</li>
<li>名字必须只包含字母，数字和下划线_。</li>
</ol>
<p>对于Python，大多数场景下，约定俗成的使用凹槽方式pothole_case。</p>
<blockquote>
<p>第四点：内置函数</p>
</blockquote>
<p><strong>函数调用：</strong></p>
<pre><code><span class="function"><span class="title">function_name</span><span class="params">(arguments)</span></span>
</code></pre><p>术语：</p>
<ul>
<li>Argument: 形参</li>
<li>Pass: 传递</li>
<li>Call: 调用</li>
<li>Return: 返回结果</li>
</ul>
<p><strong>Function dir</strong></p>
<p>Python有一系列内置的函数。运行<code>dir(__builtins__)</code>可以查看内置的函数列表。</p>
<p><strong>Function help</strong></p>
<p>为了得到某个函数的具体信息，可以调用help方法，将函数名作为参数，如下：</p>
<pre><code>&gt;&gt;&gt; help(abs)
Help on built-<span class="keyword">in</span> <span class="keyword">function</span> abs <span class="keyword">in</span> module builtins:
abs(<span class="keyword">...</span>)
    abs(number) -&gt; number

        Return the absolute value of the argument.
</code></pre><p><strong>可选参数</strong></p>
<p>例如在pow函数中[, z]表示z参数可选。</p>
<pre><code>&gt;&gt;&gt; help(pow)
Help on built-<span class="keyword">in</span> <span class="keyword">function</span> pow <span class="keyword">in</span> module builtins:

pow(<span class="keyword">...</span>)
    pow(x, y[, z]) -&gt; number

        With two arguments, equivalent to x**y.  With three arguments,
            equivalent to (x**y) % z, but may be more efficient (e.g. <span class="keyword">for</span> longs).
</code></pre><blockquote>
<p>第五点：函数</p>
</blockquote>
<p><strong>函数定义：</strong></p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">(parameters)</span>:</span>
    body
</code></pre><p><strong>执行return语句过程：</strong></p>
<ol>
<li>执行语句的表述，产生一个内存地址；</li>
<li>将内存地址传递给调用者，结束函数。</li>
</ol>
<p><strong>执行函数调用的过程：</strong></p>
<ol>
<li>求实参的值，产生内存地址；</li>
<li>存储内存地址到对应的形参；</li>
<li>执行函数体。</li>
</ol>
<p><strong>保存程序到”.py”文件中:</strong></p>
<p>我们通常将Python程序保存到”.py”文件中。一个文件可以包含多个函数定义以及一些其他语句表述。调用”.py”文件的函数之前，要先运行这个模块，否则IDLE的shell解释器不会识别这个函数调用。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Python/" term="Python"/>
    <category scheme="http://beforeload.github.io/categories/Python/" term="Python"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[The Master Method]]></title>
    <link href="http://beforeload.github.io/2013/07/21/the-master-method/"/>
    <id>http://beforeload.github.io/2013/07/21/the-master-method/</id>
    <published>2013-07-21T02:53:44.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<p>T(n) &lt;= aT(n/b) + O(n<sup>d</sup>)</p>
<p>T(n) = O(n<sup>d</sup>logn) if a = b<sup>d</sup> (Case 1)</p>
<p>T(n) = O(n<sup>d</sup>) if a &lt; b<sup>d</sup> (Case 2)</p>
<p>T(n) = O(n<sup>log<sub>b</sub>a</sup>) if a &gt; b<sup>d</sup> (Case 3)</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Algorithm/" term="Algorithm"/>
    <category scheme="http://beforeload.github.io/tags/Math/" term="Math"/>
    <category scheme="http://beforeload.github.io/categories/Algorithm/" term="Algorithm"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Summary of Distributed Computing Learning Resourses]]></title>
    <link href="http://beforeload.github.io/2013/07/11/summary-of-distribute-computing-learning-resourses/"/>
    <id>http://beforeload.github.io/2013/07/11/summary-of-distribute-computing-learning-resourses/</id>
    <published>2013-07-11T13:01:59.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="分布式计算相关资源总结">分布式计算相关资源总结</h2>
<h3 id="论文">论文</h3>
<p>首先是论文，强烈建议看英文原版，那些翻译的还是敬而远之吧！</p>
<blockquote>
<p>Google出品，必属精品！</p>
</blockquote>
<a id="more"></a>

<h4 id="四大经典论文(必看)">四大经典论文(必看)</h4>
<ol>
<li><p>The Anatomy of a Large-Scale Hypertextual Web Search Engine</p>
<p>分布式计算的奠基制作，介绍了Google搜索引擎的原型，讲解了一个基于超文本的大型系统建立过程。</p>
</li>
<li><p>The Google File System</p>
<p>GFS这篇论文已然成为分布式文件系统相关技术的一种标准。对于分布式应用的接口，分布式系统设计，<br>数据的存储以及分布式系统监控和管理相关的技术实现具有指导意义。</p>
</li>
<li><p>MapReduce: Simplified Data Processing on Large Clusters</p>
<p>MapReduce的奠基之作，就凭它提出了MapReduce编程模式，就必须要读这篇论文。通过它，可以初窥云计算的世界。<br>Google在四位数以上的个节点上运行MapReduce，并且还在持续扩展中。</p>
</li>
<li><p>BigTable: A Distributed Storage System for Structured Data.</p>
<p>这篇论文主要实现了分布式存储数据的结构化，Google Earth和网页索引都是基于BigTable实现。论文很清晰的讲解了BigTable的设计实现思路和方法。</p>
</li>
</ol>
<h4 id="三篇补充论文(推荐看)">三篇补充论文(推荐看)</h4>
<ol>
<li><p>Dynamo</p>
<p>Google原始之作！</p>
</li>
<li><p><a href="http://www.sosp2007.org/papers/sosp064-aguilera.pdf" target="_blank">Sinfonia: A New Paradigm for Building Scalable Distributed Systems</a></p>
<p>阐述构建分布式文件系统的范式方法。淘宝构建TFS，OceanBase和Tair等系统的时候充分参考了这篇论文！</p>
</li>
<li><p><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/zh-CN//archive/chubby-osdi06.pdf" target="_blank">The Chubby lock service for loosely-coupled distributed systems</a></p>
<p>Google的BigTable，MapReduce和Spanner服务都是在这个基础上构建的！分布式事务的基础，我正在看这篇论文。</p>
</li>
<li><p><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/es//archive/spanner-osdi2012.pdf" target="_blank">Spanner: Google’s Globally-Distributed Database</a></p>
</li>
</ol>
<p>第一个全球意义上的分布式数据库，推荐它的其中一个原因是，我完全看不懂！！！</p>
<h4 id="其他论文">其他论文</h4>
<p>这里还有一份别人总结的<a href="http://duanple.blog.163.com/blog/static/709717672011330101333271/" target="_blank">分布式系统领域经典论文翻译集</a>。</p>
<p><strong><em>论文来源和下载：</em></strong></p>
<p>大多数论文来源于OSDI上。可以直接去会议网站上下载。直接google scholar一下，也可以下载。</p>
<h3 id="书籍">书籍</h3>
<h4 id="分布式计算">分布式计算</h4>
<ol>
<li><a href="http://book.douban.com/subject/3108801/" target="_blank">分布式系统原理与范型</a></li>
<li><a href="http://book.douban.com/subject/2698938/" target="_blank">分布式系统概念与设计</a></li>
</ol>
<h4 id="Hadoop">Hadoop</h4>
<ol>
<li><p>《Hadoop in action》、 《Hadoop实战》</p>
<p>我看的第一本分布式计算的书，里面的内容有点老。入门的书籍，所以推荐的时候难免掺杂了感情分。</p>
</li>
<li><p>《Oreilly.Hadoop.The.Definitive.Guide.2nd.Edition 》</p>
<p>中文版本就不推荐了，直接看英文版的吧！</p>
</li>
<li><p>《Hadoop权威指南》</p>
</li>
</ol>
<p>这本书同样适合初学者，书里面有基础的实例实现。属于分布式计算方面少数可以看的中文书。<br>翻译的比较成功的两本书！当然看原版更好！</p>
<h4 id="其他书籍">其他书籍</h4>
<ol>
<li>《推荐系统实践》</li>
<li>《集体智慧编程》</li>
</ol>
<h3 id="其他Hadoop教程">其他Hadoop教程</h3>
<ol>
<li>《深入浅出Hadoop实战开发30讲》</li>
<li>《Hadoop应用开发实战 28讲》</li>
<li>《Cloudera Hadoop 4系列实战课程40讲》</li>
</ol>
<h3 id="总结">总结</h3>
<p>学习分布式计算，建议先去研究一下分布式计算的理论知识，然后学习一种框架，以Hadoop为例，从入门到精通！</p>
<ol>
<li><p>环境搭建</p>
<p><a href="http://beforeload.github.io/2013/06/29/building-distributed-systems-development-environment/">基于Hadoop的分布式系统开发环境在Ubuntu 13.04中的搭建</a></p>
</li>
<li><p>MapReduce</p>
<p><a href="http://beforeload.github.io/2013/04/13/analyze-mapreduce/">MapReduce</a></p>
</li>
<li><p>Hadoop的一点应用</p>
<ul>
<li><a href="http://beforeload.github.io/2013/04/06/hdfs-java-api/">理解 Hadoop 的 Java API</a></li>
<li><a href="http://beforeload.github.io/2013/04/18/invertedindex-in-hadoop/">倒排索引</a></li>
</ul>
</li>
</ol>
<p>看论文和书籍只是一部分，懂理论才算刚刚入门！要努力做到能应用还要争取有创新！</p>
<p>另外, Hadoop不代表分布式，还有很多类似于Hadoop且比Hadoop更具有优势的框架，如Spark就更适合实验室内的研究的小规模分布式系统，Storm更适用于实时数据流。</p>
<p>附： </p>
<ol>
<li><a href="http://aoyouzi.iteye.com/blog/1845235" target="_blank">推荐系统公共资源汇总</a></li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Distributed Computing/" term="Distributed Computing"/>
    <category scheme="http://beforeload.github.io/tags/Hadoop/" term="Hadoop"/>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/categories/Distributed Computing/" term="Distributed Computing"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Building Distributed Systems Development Environment]]></title>
    <link href="http://beforeload.github.io/2013/06/29/building-distributed-systems-development-environment/"/>
    <id>http://beforeload.github.io/2013/06/29/building-distributed-systems-development-environment/</id>
    <published>2013-06-28T17:13:47.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="基于Hadoop的分布式系统开发环境在Ubuntu_13-04中的搭建">基于Hadoop的分布式系统开发环境在Ubuntu 13.04中的搭建</h2>
<p>由于实验学习以及开发测试的需求，需要安装集群和伪分布式开发环境。</p>
<p>分为以下安装过程：</p>
<ol>
<li>安装jdk</li>
<li>安装eclipse</li>
<li>安装hadoop</li>
</ol>
<a id="more"></a>

<h3 id="安装jdk">安装jdk</h3>
<p><strong>(1) 下载JDK</strong></p>
<p>Ubuntu上下载最好不要使用FTP下载，不然会出现例如下面的问题。</p>
<pre><code>gzip: stdin: invalid compressed data--format violatedtar: Unexpected EOF <span class="keyword">in</span> archivetar: Unexpected EOF <span class="keyword">in</span> archivetar: <span class="keyword">Error</span> <span class="keyword">is</span> <span class="keyword">not</span> recoverable: exiting <span class="built_in">now</span>
</code></pre><p>从<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank">官网</a>上根据自己的系统下载相应的JDK。</p>
<pre><code>sudo mkdir /usr/java
tar zxvf jdk-<span class="number">7</span>u25-linux-x64<span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>
sudo mv jdk-<span class="number">7</span>u25-linux-x64<span class="preprocessor">.tar</span><span class="preprocessor">.gz</span> /usr/java/
</code></pre><p><strong>(2) 然后修改配置文件</strong></p>
<pre><code><span class="built_in">sudo</span> vi /etc/profile
</code></pre><p>按G可以直接到文件尾端，填写下面内容:</p>
<pre><code><span class="keyword">export</span> JAVA_HOME=/usr/java/jdk1.<span class="number">7.0</span>_25
<span class="keyword">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre
<span class="keyword">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar
<span class="keyword">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin
</code></pre><p>保存退出。</p>
<p><strong>(3) 检测是否成功</strong> </p>
<pre><code><span class="built_in">source</span> /etc/profile
java -version
</code></pre><p>如果显示下面结果，表示安装成功。</p>
<pre><code>java version <span class="string">"1.7.0_25"</span>
Java(TM) SE Runtime Environment (build <span class="number">1.7</span><span class="number">.0</span>_25<span class="attribute">-b15</span>)
Java HotSpot(TM) <span class="number">64</span><span class="attribute">-Bit</span> Server VM (build <span class="number">23.25</span><span class="attribute">-b01</span>, mixed mode)
</code></pre><h3 id="安装eclipse">安装eclipse</h3>
<p><strong>(1) 下载eclipse<em>*</em>.tar.gz</strong></p>
<pre><code>tar zxvf eclipse-standard-kepler-R-linux-gtk-x86_64.tar.gz
mv eclipse /usr/<span class="built_in">local</span>
/usr/<span class="built_in">local</span>/eclipse/eclipse    <span class="comment">#启动eclipse</span>
</code></pre><p><strong>(2) 通过修改快捷键，可以迅速启动eclipse</strong></p>
<pre><code><span class="type">System</span> <span class="type">Settings</span> -&gt; <span class="type">Keyboard</span> -&gt; <span class="type">Shortcuts</span> -&gt; <span class="type">Custom</span> <span class="type">Shortcuts</span>
</code></pre><p><strong><em>在弹窗中输入：</em></strong></p>
<pre><code><span class="attribute">Name</span>: <span class="string">eclipse</span>
<span class="attribute">Command</span>: <span class="string">/usr/local/eclipse/eclipse</span>
</code></pre><p>Apply退出后，<code>Ctrl+Alt+E</code>，添加快捷键。以后只需要通过<code>Ctrl+Alt+E</code>，即可启动Eclipse。</p>
<h4 id="ssh_无密码登录">ssh 无密码登录</h4>
<p><strong>(1) 安装SSH</strong></p>
<pre><code>sudo apt-<span class="keyword">get</span> install openssh-<span class="built_in">server</span>
</code></pre><p>如果你想让别的机器访问自己的电脑，只需要把公钥告诉别人，其他机器通过public key加密后，把数据传到自己的机器上，自己的机器用私钥进行解密。</p>
<p><strong>(2) 生成密钥的步骤也很简单：</strong></p>
<pre><code>ssh<span class="attribute">-keygen</span> <span class="attribute">-t</span> rsa <span class="attribute">-C</span> <span class="string">"your_email@example.com"</span>
</code></pre><p>详细步骤请参见<a href="//help.github.com/articles/generating-ssh-keys">Generating SSH Keys</a></p>
<pre><code><span class="keyword">cp</span> id_rsa<span class="preprocessor">.pub</span> authorized_keys
</code></pre><p><strong>(3) 测试一下，是否可以无密码连接</strong></p>
<pre><code>ssh localhost
</code></pre><p>集群配置的时候可以直接从namenode中，把新增的电脑上的public key发到namenode中，添加到它的authorized_keys中，<br>然后使用<code>scp</code>命令拷贝到新增机器上即可。</p>
<h4 id="安装Hadoop">安装Hadoop</h4>
<p><strong>(1) 下载解压hadoop</strong></p>
<pre><code>tar zxvf hadoop-<span class="number">0.20</span><span class="number">.2</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>    <span class="preprocessor">#解压</span>
</code></pre><p><strong>(2) 配置四个文件</strong></p>
<p>1) ~/hadoop-0.20.2/conf/hadoop-env.sh</p>
<pre><code><span class="keyword">export</span> JAVA_HOME=/usr/java/jdk1.<span class="number">7.0</span>_25
</code></pre><p>2) ~/hadoop-0.20.2/conf/core-site.xml</p>
<pre><code><span class="tag">&lt;<span class="title">configuration</span>&gt;</span> 
  <span class="tag">&lt;<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><p>3) ~/hadoop-0.20.2/conf/hdfs-site.xml</p>
<pre><code><span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
  <span class="tag">&lt;<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">value</span>&gt;</span>1<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><p>4) ~/hadoop-0.20.2/conf/mapred-site.xml</p>
<pre><code><span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
  <span class="tag">&lt;<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">value</span>&gt;</span>localhost:9001<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><p><strong>(3) 修改～/.bashrc</strong></p>
<pre><code><span class="built_in">echo</span> <span class="string">'export HADOOP_HOME=/home/beforeload/hadoop-0.20.2'</span> &gt;&gt; ~/.bashrc
<span class="built_in">echo</span> <span class="string">'export PATH=$PATH:$HADOOP_HOME/bin'</span> &gt;&gt; ~/.bashrc
<span class="built_in">source</span> ~/.bashrc
</code></pre><p>现在在任何目录下，都可以输入hadoop命令了。</p>
<p><strong>(4) 格式化HDFS并启动hadoop</strong></p>
<pre><code>hadoop namenode -format
start-<span class="built_in">all</span>.sh
jps   <span class="preprocessor">#查看运行的进程</span>
</code></pre><p><strong>(5) 浏览NameNode 和 JobTracker</strong></p>
<ol>
<li>NameNode <a href="http://localhost:50070/dfshealth.jsp" target="_blank">http://localhost:50070/dfshealth.jsp</a></li>
<li>JobTracker <a href="http://localhost:50030/jobtracker.jsp" target="_blank">http://localhost:50030/jobtracker.jsp</a></li>
</ol>
<p><strong>(6) 重要参数</strong></p>
<pre><code><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span>     
<span class="built_in">echo</span> <span class="variable">$HADOOP_HOME</span>
</code></pre>]]></content>
    <category scheme="http://beforeload.github.io/tags/Ubuntu/" term="Ubuntu"/>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/tags/Hadoop/" term="Hadoop"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Building Webapps with Yeoman]]></title>
    <link href="http://beforeload.github.io/2013/06/28/building-webapps-with-yeoman/"/>
    <id>http://beforeload.github.io/2013/06/28/building-webapps-with-yeoman/</id>
    <published>2013-06-28T14:11:40.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="使用Yeoman_快速构建Web应用">使用Yeoman 快速构建Web应用</h2>
<h4 id="简介">简介</h4>
<p>Yeoman不仅仅是一个应用。它也是一个工作流，一个工具集。</p>
<p>相关介绍参见<a href="http://yeoman.io/" target="_blank">官网文档</a>。</p>
<a id="more"></a>

<p>它由三个组件组成：</p>
<ol>
<li>Yo 脚手架工具：我理解成项目工程目录和文件生成工具。用来构建生产环境和生成编译环境。</li>
<li>Grunt 构建工具：主要用来构建，预览和测试你的项目。</li>
<li>Bower 包管理工具：处理包依赖关系，不需要手动下载管理脚本。可以理解成前端的NPM。</li>
</ol>
<p><strong>协作关系图：</strong></p>
<img src="//images.cnitblog.com/blog/39469/201303/09214923-27fe6dea6eb34f468e601589ea83a675.png" class="[yo-grunt-bower]">


<p>从上面流水线一样的协作图，可以看出一个项目产品的生成可以做到很规范化，从而提高生成效率。</p>
<p>我觉得在说应用之前，先要思考一下使用Yeoman的场景，如果是我们负责一个项目，思考一下如下的问题：</p>
<ol>
<li>项目目录是怎样的？</li>
<li>需要用到哪些类库？</li>
<li>(基于PHP和基于Node.js)生产环境是怎样的？</li>
<li>如果使用CoffeeScript/sass/less，又需要增加什么样的编译环境？</li>
<li>单元测试要如何进行？</li>
<li>调试环境是怎么样的？</li>
<li>打包部署要遵循什么样的流程？</li>
<li>…</li>
</ol>
<p>这些问题不能很好的解决，项目开发中都会存在或多或少的效率问题。</p>
<p>其实，解决他们很简单，yeoman提供方便快捷的解决方法，下面简单介绍一下如何构建一个项目。</p>
<h3 id="安装它">安装它</h3>
<p>第一步：首先确认拥有Node.js, Ruby的环境。</p>
<p>最好安装一下 Compass(Sass的工具库)</p>
<pre><code><span class="built_in">sudo</span> gem install compass
</code></pre><p>如果想了解一下Compass，推荐阮一峰的一篇<a href="http://www.ruanyifeng.com/blog/2012/11/compass.html" target="_blank">博文</a>。</p>
<p>第二步：然后安装三个组件</p>
<pre><code>sudo npm install <span class="attribute">-g</span> yo grunt<span class="attribute">-cli</span> bower
</code></pre><p>第三步：安装网络应用生成器</p>
<p>选择web app生成器：</p>
<pre><code>sudo npm install <span class="attribute">-g</span> generator<span class="attribute">-webapp</span>
</code></pre><p>也可以选择安装AngularJS生成器：</p>
<pre><code><span class="built_in">sudo</span> npm install -g generator-angular  <span class="comment"># install generator</span>
</code></pre><h3 id="快速构建">快速构建</h3>
<p>由于上面web应用生成器有两种，所以可以通过两种不同的方式构建我们的项目：</p>
<p>第一种：使用<code>yo webapp</code>方式</p>
<pre><code>yo webapp                     <span class="comment"># 搭建项目骨架</span>
bower <span class="keyword">install</span> underscore      <span class="comment"># 依赖通过bower安装</span>
grunt                         <span class="comment"># 构建测试发布环境</span>
</code></pre><p>第二种：使用<code>yo angular</code>方式</p>
<pre><code>yo angular                    <span class="preprocessor"># 搭建项目骨架</span>
bower install angular-ui      <span class="preprocessor"># 依赖通过bower安装</span>
grunt test                    <span class="preprocessor"># 测试</span>
grunt <span class="keyword">server</span>                  <span class="preprocessor"># 预览</span>
grunt  
</code></pre><h3 id="总结">总结</h3>
<p>通过以上的步骤，我们很容易的构建出了一个简易的web项目。yeoman有很多特性，例如可以自定义模板（如HTML5, Boilerplate, Twitter Bootstrap等），AMD（通过RequireJS）等其他工具。</p>
<p>自动编译CoffeeScript和Compass也是一大亮点，值得一提的是，yeoman提供了live reload功能，在对项目文件修改保存后，前端页面回自动刷新。</p>
<p>还有太多太多特性了，如jslint完善脚本，内置HTTP服务器，集成包管理，ES6的语法支持，PhantomJS单元测试等等。希望大家使用愉快。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Node.js/" term="Node.js"/>
    <category scheme="http://beforeload.github.io/categories/Node.js/" term="Node.js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Common Software Installation and Configuration on Ubuntu 13.04]]></title>
    <link href="http://beforeload.github.io/2013/06/22/my-software-installation-and-configuration-on-ubuntu-1304/"/>
    <id>http://beforeload.github.io/2013/06/22/my-software-installation-and-configuration-on-ubuntu-1304/</id>
    <published>2013-06-22T13:23:50.000Z</published>
    <updated>2014-01-12T08:37:52.000Z</updated>
    <content type="html"><![CDATA[<h1 id="在Ubuntu_13-04上常用软件的安装配置">在Ubuntu 13.04上常用软件的安装配置</h1>
<p>安装完Ubuntu 13.04 后，我的一些软件安装和配置过程。</p>
<ol>
<li><a href="#-5b89-88c5-zsh-548c-oh-my-zsh">安装zsh和oh-my-zsh</a></li>
<li><a href="#Ubuntu_-7ec8-7aef-900f-660e-5316-">终端透明化</a></li>
<li><a href="#-5b89-88c5-_chrome">安装chrome</a></li>
<li><a href="#-5b89-88c5-git">安装git</a></li>
<li><a href="#-5b89-88c5-VLC-89c6-9891-64ad-653e-5668-">安装VLC播放器</a></li>
<li><a href="#-5b89-88c5-sougou_-2b-_fcitx">安装fcitx + 搜狗拼音</a></li>
<li><a href="#-5b89-88c5-914d-7f6e-VIM">安装vim</a></li>
<li><a href="#-5b89-88c5-Node-js">安装Node.js</a></li>
<li><a href="#-5b89-88c5-9510-6377-6821-56ed-7f51-5ba2-6237-7aef-">安装锐捷校园网客户端</a></li>
<li><a href="#-5b89-88c5-914d-7f6e-JDK">安装配置jdk</a></li>
</ol>
<a id="more"></a>

<h2 id="安装zsh和oh-my-zsh">安装zsh和oh-my-zsh</h2>
<p><strong><em>安装 curl:</em></strong></p>
<pre><code><span class="built_in">sudo</span> apt-get install curl
</code></pre><p>然后:</p>
<pre><code><span class="built_in">sudo</span> apt-get install zsh
</code></pre><p><strong><em>可以通过curl方式安装：</em></strong></p>
<pre><code>curl -<span class="constant">L</span> <span class="symbol">https:</span>/<span class="regexp">/github.com/robbyrussell</span><span class="regexp">/oh-my-zsh/raw</span><span class="regexp">/master/tools</span><span class="regexp">/install.sh | sh</span>
</code></pre><p><strong><em>也可以通过wget：</em></strong></p>
<pre><code>wget --no-check-certificate <span class="symbol">https:</span>/<span class="regexp">/github.com/robbyrussell</span><span class="regexp">/oh-my-zsh/raw</span><span class="regexp">/master/tools</span><span class="regexp">/install.sh -O - | sh</span>
</code></pre><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank">参考文档</a></p>
<h2 id="Ubuntu_终端透明化">Ubuntu 终端透明化</h2>
<p>Ctrl+Alt+T 打开终端，菜单 </p>
<pre><code><span class="type">Edit</span>-&gt;<span class="type">Profile</span> <span class="type">Preference</span>-&gt;<span class="type">Background</span>-&gt;<span class="type">Transparent</span> background
</code></pre><h2 id="安装_chrome">安装 chrome</h2>
<p><strong><em>安装依赖:</em></strong></p>
<pre><code><span class="built_in">sudo</span> apt-get install (依赖包)
</code></pre><p>然后从google chrome官方网站上下载安装</p>
<pre><code>sudo dpkg <span class="attribute">-i</span> google<span class="attribute">-chrome</span><span class="attribute">-stable_</span><span class="subst">*</span><span class="built_in">.</span>deb
</code></pre><p>终端输入<code>google-chrome</code>即可启动。</p>
<h2 id="安装git">安装git</h2>
<pre><code><span class="built_in">sudo</span> apt-get install git
</code></pre><p><strong><em>相关配置:</em></strong></p>
<pre><code>git config --<span class="keyword">global</span> user.name beforeload
git config --<span class="keyword">global</span> user.email fe.daniel91<span class="variable">@gmail</span>.com
git config --<span class="keyword">global</span> <span class="keyword">color</span>.diff auto
git config --<span class="keyword">global</span> <span class="keyword">color</span>.branch auto
git config --<span class="keyword">global</span> <span class="keyword">color</span>.ui true
git config --<span class="keyword">global</span> <span class="keyword">color</span>.interactive auto
git config --<span class="keyword">global</span> <span class="keyword">color</span>.status auto
git config --<span class="keyword">global</span> push.<span class="keyword">default</span> current
git config --<span class="keyword">global</span> core.<span class="keyword">editor</span> vim
git config --<span class="keyword">global</span> core.autocrlf off
git config --<span class="keyword">global</span> merge.tool vimdiff
</code></pre><h3 id="查看配置">查看配置</h3>
<p><strong><em>查看所有配置:</em></strong></p>
<pre><code><span class="comment">git</span> <span class="comment">config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">list</span>
</code></pre><p><strong><em>查看某个配置:</em></strong></p>
<pre><code>git config user<span class="preprocessor">.name</span>
</code></pre><p>或者 </p>
<pre><code>cat ~/<span class="preprocessor">.gitconfig</span>
</code></pre><h2 id="安装VLC视频播放器">安装VLC视频播放器</h2>
<pre><code><span class="built_in">sudo</span> apt-get install vlc
</code></pre><p>终端输入<code>vlc</code>启动，在菜单栏</p>
<pre><code><span class="type">Tools</span>-&gt; <span class="type">Preference</span> -&gt; <span class="type">Subtitles</span> &amp; <span class="type">OSD</span> 修改<span class="type">Default</span> encoding为<span class="type">Universal</span>(<span class="type">UTF</span>-<span class="number">8</span>),或者<span class="type">GBK</span>
</code></pre><p>还可以设置相关中文字体（中文可选）。</p>
<p>然后在右上角:</p>
<pre><code><span class="type">System</span> <span class="type">Settings</span> -&gt; <span class="type">Details</span> -&gt; <span class="type">Default</span> <span class="type">Applications</span> -&gt; <span class="type">Video</span>选择<span class="type">VLC</span> media player
</code></pre><p>这样打开相关视频文件，可以直接使用VLC播放。</p>
<h2 id="安装sougou_+_fcitx">安装sougou + fcitx</h2>
<pre><code>sudo add<span class="attribute">-apt</span><span class="attribute">-repository</span> ppa:fcitx<span class="attribute">-team</span>/nightly
sudo apt<span class="attribute">-get</span> update
sudo apt<span class="attribute">-get</span> install fcitx<span class="attribute">-sogoupinyin</span>
</code></pre><p>然后在<code>System Settings -&gt; Language Support -&gt; Keyboard input method system</code> 中选择 fcitx。</p>
<p><strong><em>[可选]安装皮肤：</em></strong></p>
<p>下载<a href="http://pan.baidu.com/share/link?shareid=591450&amp;uk=4060302862" target="_blank">fcitx-sougou-skin</a></p>
<pre><code>sudo dpkg <span class="attribute">-i</span> fcitx<span class="attribute">-skin</span><span class="attribute">-sogou_0</span><span class="number">.0</span><span class="number">.2</span>_all<span class="built_in">.</span>deb
</code></pre><p>在fcitx外观中选择sougou即可。</p>
<p>最后注销，重新登录，输入法生效。</p>
<h2 id="安装配置VIM">安装配置VIM</h2>
<pre><code><span class="built_in">sudo</span> apt-get install vim
</code></pre><p><strong><em>配置：</em></strong></p>
<p>安装vundle</p>
<pre><code>git clone https://github<span class="preprocessor">.com</span>/gmarik/vundle<span class="preprocessor">.git</span> ~/<span class="preprocessor">.vim</span>/bundle/vundle
</code></pre><p>用<a href="https://github.com/beforeload/myconf/blob/master/.vimrc" target="_blank">我的.vimrc配置文件</a><br>覆盖<code>~/.vimrc</code>文件即可</p>
<p>在vim中执行<code>:BundleInstall</code>,自动安装vim插件。</p>
<p>Powerline中下面的箭头可能存在字体问题，解决的办法是给字体打补丁。</p>
<h2 id="安装Node-js">安装Node.js</h2>
<p>安装依赖</p>
<pre><code>sudo apt<span class="attribute">-get</span> install build<span class="attribute">-essential</span> libssl<span class="attribute">-dev</span>
</code></pre><p>编译安装</p>
<pre><code>mkdir node &amp;&amp; cd node
git clone https:<span class="comment">//github.com/joyent/node.git</span>
./configure
<span class="built_in">make</span> 
<span class="built_in">make</span> install
</code></pre><h2 id="安装锐捷校园网客户端">安装锐捷校园网客户端</h2>
<p>下载<a href="http://ncs.hust.edu.cn/download/soft/Linux\ SU\ V1.01版.rar" target="_blank">Linux SU V 1.01</a></p>
<p>安装unrar</p>
<pre><code>sudo apt-get install unrar

unrar ***<span class="preprocessor">.rar</span>
tar -zxvf ***<span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>

cd rjsupplicant/
</code></pre><p>查看设置</p>
<pre><code><span class="built_in">sudo</span> ./rjsupplicant.sh -h
</code></pre><p>设置好后启动</p>
<pre><code><span class="built_in">sudo</span> ./rjsupplicant.sh
</code></pre><h2 id="安装配置JDK">安装配置JDK</h2>
<p>相关安装步骤已经在另外<a href="//beforeload.github.io/2013/06/29/building-distributed-systems-development-environment/">一篇博文</a>中做出更新。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Ubuntu/" term="Ubuntu"/>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Storing Node application data]]></title>
    <link href="http://beforeload.github.io/2013/06/15/storing-node-application-data/"/>
    <id>http://beforeload.github.io/2013/06/15/storing-node-application-data/</id>
    <published>2013-06-15T12:52:00.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="浅析Node-js应用的数据存储">浅析Node.js应用的数据存储</h2>
<p>主要从以下三点简要分析</p>
<ol>
<li>内存和文件系统数据存储</li>
<li>传统的关系型数据库存储</li>
<li>非关系型数据库存储</li>
</ol>
<a id="more"></a>

<p>选择一种合适的数据存储机制主要依赖五个因素：</p>
<ol>
<li>存什么样的数据</li>
<li>数据读写的速度要求以满足足够的性能</li>
<li>多大规模的数据</li>
<li>数据查询方式</li>
<li>数据存储和保存的生命周期</li>
</ol>
<h3 id="Relational_Database">Relational Database</h3>
<ol>
<li>MySQL</li>
<li>Postgres</li>
</ol>
<h3 id="NoSQL_databases">NoSQL databases</h3>
<ol>
<li>Redis</li>
<li>MongoDB</li>
<li>Mongoose</li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Node.js/" term="Node.js"/>
    <category scheme="http://beforeload.github.io/categories/Node.js/" term="Node.js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[building PhoneGap development environment]]></title>
    <link href="http://beforeload.github.io/2013/06/12/building-phonegap-development-environment/"/>
    <id>http://beforeload.github.io/2013/06/12/building-phonegap-development-environment/</id>
    <published>2013-06-11T18:29:06.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Ubuntu_13-04_Android开发基本环境配置">Ubuntu 13.04 Android开发基本环境配置</h3>
<h4 id="基本环境">基本环境</h4>
<pre><code>sudo apt<span class="attribute">-get</span> install ia32<span class="attribute">-libs</span> <span class="variable">#64</span>位系统的<span class="number">32</span>位程序兼容库adb需要此库(<span class="number">32</span>位系统的当然略过此步骤)
sudo apt<span class="attribute">-get</span> install ant
</code></pre><a id="more"></a>

<h4 id="安装独立SDK">安装独立SDK</h4>
<p>下载<a href="http://developer.android.com/sdk/index.html" target="_blank">SDK</a></p>
<pre><code>tar zxvf path/<span class="keyword">to</span>/android<span class="attribute">-sdk_r21</span><span class="number">.0</span><span class="number">.1</span><span class="attribute">-linux</span><span class="built_in">.</span>tgz <span class="attribute">-C</span> ~/DevTools
cd ~/DevTools/android<span class="attribute">-sdk</span><span class="attribute">-linux</span>/tools<span class="subst">/</span>
<span class="built_in">.</span>/android sdk
</code></pre><h4 id="配置环境变量">配置环境变量</h4>
<p>在~/.bashrc或者/etc/environemnt</p>
<pre><code>export <span class="constant">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:~/DevTools/android-sdk-linux/tools/</span><span class="symbol">:~/DevTools/android-sdk-linux/platform-tools/</span>
</code></pre><h4 id="测试">测试</h4>
<pre><code>android list targets    <span class="comment">#查看可用平台</span>
android create <span class="keyword">project</span> –t <span class="number">1</span> –n MyFirstApp –p ~/Development/android-<span class="keyword">project</span>/MyFirstApp –a MainActivity –k com.example.myfirstapp
android avd   <span class="comment">#点击New，选择一个设备创建模拟器，完了点击Start启动模拟器 </span>
cd ~/DevTools/android-<span class="keyword">project</span>/MyFirstApp
ant debug   <span class="comment">#debug模式打包</span>
adb <span class="keyword">install</span> bin/MyFirstApp-debug.apk    <span class="comment">#用adb安装到模拟器</span>
</code></pre><p>具体教程参见<a href="http://developer.android.com/training/basics/firstapp/index.html" target="_blank">Building Your First App</a></p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/tags/Ubuntu/" term="Ubuntu"/>
    <category scheme="http://beforeload.github.io/tags/Android/" term="Android"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Building Node web Applications]]></title>
    <link href="http://beforeload.github.io/2013/06/10/building-node-web-applications/"/>
    <id>http://beforeload.github.io/2013/06/10/building-node-web-applications/</id>
    <published>2013-06-10T10:10:49.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Node-js网络应用开发">Node.js网络应用开发</h2>
<ol>
<li>Handling HTTP requests with Node’s API</li>
<li>Building a RESTful web service</li>
<li>Serving static files</li>
<li>Accepting user input from forms</li>
<li>Securing your application with HTTPS</li>
</ol>
<a id="more"></a>

<p>Node.js网络应用开发的简单图示如下：</p>
<img src="http://i.minus.com/iLMAoN6C3pEtN.png">


<h3 id="HTTP_server_的基本面">HTTP server 的基本面</h3>
<h4 id="HTTP请求在Node_HTTP_server中的生命周期">HTTP请求在Node HTTP server中的生命周期</h4>
<ol>
<li>HTTP 客户端（例如：浏览器）发送HTTP请求</li>
<li>Node进程接受到连接把请求的数据发送给HTTP server</li>
<li>Node进程把HTTP请求头完整解析，在’request’的回调事件中处理相应的逻辑</li>
<li>request的回调函数中体现应用的逻辑，例如产生一个response</li>
<li>请求通过HTTP server返回，这个过程会格式化成一个标准的HTTP response返回给客户端</li>
</ol>
<h3 id="Building_a_RESTful_web_service">Building a RESTful web service</h3>
<p>CURD: Creat, Update, Read, Delete<br>HTTP: Get, Post, Put, Delete</p>
<ol>
<li>使用POST创建资源</li>
<li>使用GET获取资源</li>
<li><p>使用DELETE删除资源</p>
<p> function(req, res){<br>   switch(req.method){<br>   case: ‘GET’: </p>
<pre><code> // to <span class="keyword">do</span>
 <span class="keyword">break</span>
</code></pre><p>   case: ‘POST’:</p>
<pre><code> // <span class="keyword">...</span>
 <span class="keyword">break</span>
</code></pre><p>   case: ‘DELETE’:</p>
<pre><code> // <span class="keyword">...</span>
 <span class="keyword">break</span>
</code></pre><p>   }<br> }</p>
</li>
</ol>
<h3 id="Serving_static_files">Serving static files</h3>
<ol>
<li>Get /index.html 用户向服务器请求一个静态文件</li>
<li>Node 服务器接受请求，应用的逻辑部分去读取这个文件</li>
<li>文件通过一个读取流的实例传递给服务器</li>
<li><p>文件的ReadStream通过’piped’拼接方式，以HTTP的response形式返回给客户端</p>
<p> …<br> var stream = fs.createReadStream(path)<br> // stream.on(‘data’, function(chunk){<br> //   res.write(chunk)<br> // })<br> // stream.on(‘end’, function(){<br> //   res.end()<br> // })<br> stream.pipe(res)<br> …</p>
</li>
</ol>
<p>相关的图片如下：</p>
<img src="http://i.minus.com/iOZW6WxLIsBNk.png">


<p>…<br>stream.pipe(res)<br>stream.on(‘error’,function(err){<br>  res.statusCode = 500<br>  res.end(‘Internal Server Error!’)<br>})<br>…</p>
<p>文件不存在错误处理”ENOENT, No such file or dictionary”</p>
<p>根据<code>fs.stat(path, function(err, stat){})</code>的err判断</p>
<h3 id="接受用户表单提交数据">接受用户表单提交数据</h3>
<ol>
<li>表单域</li>
<li>上传文件node-formidable</li>
<li>实时计算上传进度</li>
</ol>
<p>两种类型的表单提交</p>
<ul>
<li>“application/x-www-form-urlencoded”: the default for HTML forms</li>
<li>“multipart/form-data”: used when form contains files, non-ascii, or binary data</li>
</ul>
<p>node-formidable这个包可以帮助我们解决表单提交的绝大多数问题。<br>也可以计算伪实时的文件上传进度，如下所示：</p>
<pre><code>form.on(<span class="string">'process'</span>, <span class="function"><span class="keyword">function</span><span class="params">(bytesReceived, bytesExpected)</span>{</span>
    <span class="keyword">var</span> percent = bytesReceived / bytesExpected * <span class="number">100</span>
    console.log(percent)
})
</code></pre><p>剩下的就是将进度在前端页面上显示出来，利用如socket.io这样的实时模块可以轻松的搞定。我将在我的Repo: <a href="https://github.com/beforeload/node-upload" target="_blank">node-upload</a>中完成它。</p>
<h3 id="使用HTTPS_确保应用的安全性">使用HTTPS 确保应用的安全性</h3>
<p>生成一个私钥(加密)<br>    openssl genrsa 1024 &gt; key.pem</p>
<p>生成证书(解码)<br>    openssl req -x509 -new -key key.pem &gt; key-cert.pem</p>
<p><strong><em>HTTPS server选项</em></strong><br>    var https = require(‘https’)<br>      , fs = require(‘fs’)<br>      , options = {<br>        key: fs.readFileSync(‘./key.pem’),<br>        cert: fs.readFileSync(‘./key-cert.pem’)<br>      }</p>
<pre><code>https.createServer(options, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span></span>{
  res.writeHead(<span class="number">200</span>)
  res.<span class="keyword">end</span>(<span class="string">'Hello world!'</span>)
}).listen(<span class="number">4000</span>)
</code></pre><p>证书可以共享，它包括public key和持有者的身份信息。当然如果要发布一个网站，就需要在Certificate Authority(CA)上去注册，获取一个真实的，受信任的SSL证书。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Node.js/" term="Node.js"/>
    <category scheme="http://beforeload.github.io/categories/Node.js/" term="Node.js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Priority Queue]]></title>
    <link href="http://beforeload.github.io/2013/05/30/priority-queue/"/>
    <id>http://beforeload.github.io/2013/05/30/priority-queue/</id>
    <published>2013-05-29T16:40:13.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>以6.5-1的数据作为输入 实现heapsort, 以及图解排序过程 </li>
<li>实现6.5-3所描述的最小优先级队列接口, 分析各接口所需的时间复杂度 </li>
<li>练习6.5-8 </li>
</ol>
<a id="more"></a>

<p>6.5-1 HEAP-EXTRACT-MAX</p>
<pre><code><span class="keyword">if</span> head-size[A] &lt; <span class="number">1</span>
    <span class="keyword">then</span> error
<span class="built_in">max</span> &lt;<span class="comment">-- A[1]</span>
A[<span class="number">1</span>] &lt;<span class="comment">-- heap-size[A] - 1</span>
MAX-HEAPIFY(A, <span class="number">1</span>)
<span class="constant">return</span> <span class="built_in">max</span>
</code></pre><img src="http://i.minus.com/imDBy99LrOzWP.jpg">


<p>6.5-3 HEAP-MINIUM(A)</p>
<p>伪代码书上已经有了</p>
<pre><code>HEAP-MINIMUM(<span class="literal">A</span>)
    <span class="keyword">return</span> <span class="literal">A</span>[<span class="number">1</span>]
</code></pre><p>利用HEAP-EXTRACT-MAX(A)容易写出HEAP-EXTRACT-MIN(A)</p>
<h4 id="HEAP-EXTRACT-MIN(A)">HEAP-EXTRACT-MIN(A)</h4>
<pre><code><span class="keyword">if</span> heap-size[<span class="literal">A</span>] &lt; <span class="number">1</span>
    then error 
max &lt;- <span class="literal">A</span>[<span class="number">1</span>]
<span class="literal">A</span>[<span class="number">1</span>] &lt;- <span class="literal">A</span>[heap-size[<span class="literal">A</span>]] - <span class="number">1</span>
heap-size[<span class="literal">A</span>] &lt;- heap-size[<span class="literal">A</span>] - <span class="number">1</span>
MIN-HEAPIFY(<span class="literal">A</span>, <span class="number">1</span>)
<span class="keyword">return</span> max
</code></pre><p>同样，由HEAD-INCREASE-KEY很容易就写出HEAD-DECREASE-KEY过程的伪代码：</p>
<h4 id="HEAD-DECREASE-KEY">HEAD-DECREASE-KEY</h4>
<pre><code><span class="keyword">if</span> key &gt; <span class="literal">A</span>[i]
    then error
<span class="literal">A</span>[i] &lt;- key
<span class="keyword">while</span> i &gt; <span class="number">1</span> <span class="literal">and</span> <span class="literal">A</span>[PARENT(i)] &gt; <span class="literal">A</span>[i]
    do exchange <span class="literal">A</span>[i] &lt;-&gt; <span class="literal">A</span>[PARENT(i)]
            i &lt;- PARENT(i)
</code></pre><p>同样，由MAX-HEAP-INSERT容易写出MIN-HEAP-INSERT</p>
<h4 id="MIN-HEAP-INSERT">MIN-HEAP-INSERT</h4>
<pre><code>heap-size[<span class="literal">A</span>] &lt;- heap-size[<span class="literal">A</span>] + <span class="number">1</span>
<span class="literal">A</span>[heap-size[<span class="literal">A</span>]] &lt;- 无穷
HEAP-INCREASE-KEY(<span class="literal">A</span>, heap-size[<span class="literal">A</span>], key)
</code></pre><p>6.5-8</p>
<p>每一个链表作为一个节点，链表的第一个元素作为key，然后组成一个堆，这个堆的大小为K(k个链表，k个节点)。</p>
<p>链表合并过程思路如下：</p>
<ol>
<li>通过堆的根节点，获得其链表的第一个元素</li>
<li>以获取的元素作为目标链表的尾端</li>
<li>因为根的第一个元素的key发生改变，对其进行MIN-HEAPFIY操作，递归进行下去。</li>
</ol>
<p>显然，在每个堆中取一个key组成的堆是实现此过程的一个最小堆。</p>
<p>具体的实现代码实在没有时间写了。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Algorithm/" term="Algorithm"/>
    <category scheme="http://beforeload.github.io/categories/Algorithm/" term="Algorithm"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Common Problems of Recommender Systems]]></title>
    <link href="http://beforeload.github.io/2013/05/27/common-problems-of-recommendation-systems/"/>
    <id>http://beforeload.github.io/2013/05/27/common-problems-of-recommendation-systems/</id>
    <published>2013-05-27T14:14:53.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="推荐系统的常见问题">推荐系统的常见问题</h3>
<h4 id="缺少大数据问题">缺少大数据问题</h4>
<p>Big data是推荐系统最关键的因素之一，对于推荐系统而言，可能最大的问题就是需要大规模的数据才能有效的进行推荐过程。这也毋庸置疑的表示那些拥有典型著名的推荐系统的公司恰恰是那些拥有大量消费者数据的公司：Google, Amazon, Netflix, Last.fm 。</p>
<a id="more"></a>

<h4 id="冷启动问题">冷启动问题</h4>
<p>在推荐系统的冷启动问题中，最主要包括两个方面：新用户问题，新资源问题。</p>
<p>(1) 新用户问题</p>
<p>这部分用户在系统中没有资源浏览访问记录，系统无法根据该用户行为数据对其浏览行为进行资源访问的预测和推推荐。</p>
<p>(2) 新资源问题</p>
<p>该部分资源没有用户的访问记录，使得系统在做数据分析时无法将其纳入待处理数据中，进而无法向用户推荐该资源。</p>
<h4 id="变化数据问题">变化数据问题</h4>
<p>推荐系统中的变化数据问题是指推荐系统中常常充斥着老的内容，新的数据资料等很难得到推荐。</p>
<h4 id="变化喜好问题">变化喜好问题</h4>
<p>在推荐系统中用户也许怀着不同的目的对于文件资源进行搜索浏览，及用户的喜好是变化跳跃的，系统很难对这种跳跃的喜好类别进行资源数据推荐。</p>
<h4 id="参考">参考</h4>
<p>(1) <a href="http://readwrite.com/2009/01/28/5_problems_of_recommender_systems" target="_blank">5 Problems of Recommender Systems</a><br>(2) <a href="http://www.resyschina.com/2010/03/five_problems_of_resys.html" target="_blank">推荐系统5大问题</a></p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Translate/" term="Translate"/>
    <category scheme="http://beforeload.github.io/tags/Distributed Computing/" term="Distributed Computing"/>
    <category scheme="http://beforeload.github.io/categories/Distributed Computing/" term="Distributed Computing"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Fix Some Ubuntu Problems]]></title>
    <link href="http://beforeload.github.io/2013/05/20/fix-some-problems/"/>
    <id>http://beforeload.github.io/2013/05/20/fix-some-problems/</id>
    <published>2013-05-20T14:10:58.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="解决_Ubuntu_13-04的视频音频相关问题">解决 Ubuntu 13.04的视频音频相关问题</h2>
<ol>
<li>Fix ASUS Webcam Problem:vertically flip my webcam’s image</li>
</ol>
<p><strong><em>问题描述</em></strong>：华硕电脑摄像头视频图像倒立</p>
<p>解决方法： 在google上搜索了一下 ubuntu camera invert找到几篇解决的博文，步骤如下：</p>
<a id="more"></a>

<p>(1) Install</p>
<pre><code><span class="variable">$echo</span> <span class="attribute">-e</span> <span class="string">"\n# libv4l PPA\ndeb http://ppa.launchpad.net/libv4l/ppa/ubuntu `lsb_release -c | awk '{print $2}'` main"</span> <span class="subst">|</span> sudo tee <span class="attribute">-a</span> /etc/apt/sources<span class="built_in">.</span><span class="built_in">list</span>

<span class="variable">$sudo</span> apt<span class="attribute">-key</span> adv <span class="subst">--</span>recv<span class="attribute">-keys</span> <span class="subst">--</span>keyserver keyserver<span class="built_in">.</span>ubuntu<span class="built_in">.</span>com C3FFB4AA

<span class="variable">$sudo</span> apt<span class="attribute">-get</span> update

<span class="variable">$sudo</span> apt<span class="attribute">-get</span> install libv4l<span class="subst">-</span><span class="number">0</span>
</code></pre><p>(2) Start application</p>
<pre><code><span class="variable">$export</span> <span class="constant">LIBV4LCONTROL_FLAGS</span>=<span class="number">3</span> &amp;&amp; cheese
<span class="variable">$export</span> <span class="constant">LIBV4LCONTROL_FLAGS</span>=<span class="number">3</span> &amp;&amp; <span class="constant">LD_PRELOAD</span>=<span class="regexp">/usr/lib</span><span class="regexp">/i386-linux-gnu/libv</span>4l/v4l1compat.so skype
</code></pre><p>为了以后不需要输入这么多，建立一个bash<br>Step 1:</p>
<pre><code><span class="variable">$sudo</span> gedit /usr/<span class="keyword">local</span>/bin/skype
</code></pre><p>填写下面内容</p>
<pre><code><span class="constant">LD_PRELOAD</span>=<span class="regexp">/usr/lib</span><span class="regexp">/i386-linux-gnu/libv</span>4l/v4l1compat.so /usr/bin/skype
</code></pre><p>Step 2:</p>
<pre><code>sudo chmod <span class="operator">a</span>+x /usr/<span class="built_in">local</span>/bin/skype
</code></pre><p><strong><em>注意</em></strong>：</p>
<ol>
<li><p>v4l1compat.so的位置在Ubuntu 13.04上可能和之前的版本不同，使用locate指令可以先确定一下位置。</p>
<p> $ locate v4l1compat.so<br> /usr/lib/i386-linux-gnu/libv4l/v4l1compat.so</p>
</li>
</ol>
<p><strong><em>参考</em></strong>：</p>
<p>(1) <a href="http://www.paullabis.com/2010/08/fix-upside-down-or-inverted-webcam-on.html" target="_blank">Fix upside-down or inverted webcam on Ubuntu linux</a></p>
<p>(2)<a href="http://community.linuxmint.com/tutorial/view/219" target="_blank">How to make Webcam compatible with Skype.</a></p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Ubuntu/" term="Ubuntu"/>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[inversion monge quicksort]]></title>
    <link href="http://beforeload.github.io/2013/05/17/inversion-monge-quicksort/"/>
    <id>http://beforeload.github.io/2013/05/17/inversion-monge-quicksort/</id>
    <published>2013-05-17T14:44:25.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="逆序对，Monge矩阵，快排优化——三数取中划分分析">逆序对，Monge矩阵，快排优化——三数取中划分分析</h2>
<h3 id="题目">题目</h3>
<ol>
<li>第二章思考题2-4(逆序对)</li>
<li>第四章思考题4-7(Monge矩阵)</li>
<li>第七章思考题7-5(快排的三数取中划分分析)</li>
</ol>
<a id="more"></a>

<h3 id="2-4_逆序对">2-4 逆序对</h3>
<p>a)</p>
<script src="https://gist.github.com/5599553.js?file=inversion.c"></script>


<p>结果: </p>
<p>(2,3)<br>(2,8)<br>(2,6)<br>(3,8)<br>(3,6)</p>
<p>b)</p>
<p>从1到n按倒序排列的数组含有最多的逆序对，<br>个数为(n-1)+(n-2)+…+1 = (n-1 + 1) <em> (n-1)/2 = n </em> (n-1)/2</p>
<p>c)</p>
<p>插入排序的运行时间与输入数组中逆序对的数量之间有怎样的关系?</p>
<p>当数组从小到大排序，插入排序算法复杂度最优为O(n),此时逆序对为0;</p>
<p>当数组从大到小排序，插入排序算法复杂度最坏情况，此时逆序对最多为n * (n-1)/2;</p>
<p>插入排序的过程如下：</p>
<figure class="highlight C"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="keyword">int</span> insert_sort(<span class="keyword">void</span>)
{
	<span class="keyword">int</span> i, j, key;
	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; N; i++) {
		key = arr[i];
		j = i;
		<span class="keyword">while</span> (j &gt; <span class="number">0</span> && arr[j - <span class="number">1</span>] &gt; key) {
			arr[j] = arr[j - <span class="number">1</span>];
			j--;
		}
	}
	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) {
		<span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);
	}
}
</pre></td></tr></table></figure>

<p>每多一个逆序对存在，就需要多一次比较，运行时间增加。插入排序每次比较后交换元素都是减少一对逆序对，循环本身是对所有的逆序对排序的过程。   </p>
<p>d)<br>O(nlg(n))修改合并排序，确定n个元素的任意排列中逆序对的数目。</p>
<script src="https://gist.github.com/5599593.js?file=inversion_d.c"></script>



<h3 id="Monge矩阵">Monge矩阵</h3>
<p>a)证明：当且仅当矩阵中所有2×2的矩阵都为Monge矩阵时，这个矩阵才为Monge矩阵。</p>
<p>先对行使用归纳法：假设i,k行j，l列矩阵为Monge矩阵，证明i,k+1行，j,l列矩阵为Monge矩阵即可</p>
<p>(1)已知i,k行j,l列为Monge矩阵即A[i,j]+A[k,l] &lt;= A[i,l] + A[k,j]<br>(2)假设A[k,j] + A[k+1,l] &lt;= A[k+1,j] + A[k,l]<br>(3)只需要证明i,k+1行j,l列的矩阵为Monge矩阵，<br>由(1),(2)得A[i,j] + A[k+1,l] &lt;= A[k,j] + A[k+1,l]                </p>
<p>对列用归纳法也是相同步骤，</p>
<p>已知A[i, j]+A[k, n] ≤ A[i, n]+A[k,j]<br>假设<br>A[i, n]+A[k,n+1] ≤ A[i, n+1]+A[k,n]<br>所以A[i, j]+A[k, n+1] ≤ A[i, n+1]+A[k, j]成立。                </p>
<p>行和列都满足归纳法，当<code>A[i,j]+A[i+1,j+1] &lt;= A[i,j+1] + A[i+1,j]</code>时，整个矩阵为Monge矩阵。               </p>
<p><strong>“仅当”</strong>这个条件用反正法可证。           </p>
<p>b) 利用a)的结论：<code>A[i,j] + A[i+1,j+1] &lt;= A[i,j+1]+A[i+1,j]</code>              </p>
<p>很容易得到矩阵第二行第三列到第三行第四列的2×2矩阵不满足条件;<br>所以只需要将第二行第三列的16和第三行第三列的22交换即可。             </p>
<p>c)<br>假设Monge矩阵中存在第x行和第x+1行，<code>f(x) &gt; f(x+1)  (1 &lt;= x &lt; m)</code>               </p>
<p>已知<code>A[x,f(x+1)] + A[x+1, f(x)] &lt;= A[x,f(x)] + A[x+1, f(x+1)]</code>                </p>
<p>又因为             </p>
<p>A[x,f(x)] &lt; A[x, f(x+1)]        (1)<br>A[x+1,f(x+1)] &lt;= A[x+1, f(x)]   (2)</p>
<p>(1) + (2) 得：                 </p>
<p>A[x,f(x+1)] + A[x+1, f(x)] &gt; A[x, f(x)] + A[x+1,f(x+1)]   (3)</p>
<p>根据a)结论，任意2×2矩阵都有</p>
<p>A[i,j] + A[i+1,j+1] &lt;= A[i,j+1]+A[i+1,j]      (4)</p>
<p>(3) 和 (4)矛盾，假设不成立。<br>由此可得：</p>
<p>f(1) &lt;= f(2) &lt;= … &lt;= f(m)            </p>
<p>d) 已知偶数行最左端最小值f(2), f(4), f(6), …<br>且f(2k) &lt;= f(2k+1) &lt;= f(2(k+1))</p>
<p>奇数行搜索一次，搜索范围为n列，偶数行重复计算两次</p>
<p>奇数行最左端最小值时间复杂度O(m/2+n)=O(m+n)<br>e)<br>由d)可得递归式：T(m) = T(m/2) + O(m+n)</p>
<p>递归运算结果：</p>
<p>T(m) = O(nlgm) + O(m+n)<br>     = O(nlgm + m + n)<br>     = O(nlgm + m)              </p>
<h3 id="快排中三数取中划分分析">快排中三数取中划分分析</h3>
<img src="//i.minus.com/i29Ufb20Oolkw.jpg" class="[inversion]">

<p>答案用图片显示，<a href="//i.minus.com/i29Ufb20Oolkw.jpg">图片在这里</a> </p>
<p>参考文章</p>
<ol>
<li><a href="//blog.csdn.net/zhanglei8893/article/details/6266915">“三数取中“划分</a></li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Algorithm/" term="Algorithm"/>
    <category scheme="http://beforeload.github.io/categories/Algorithm/" term="Algorithm"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[内容聚合Nodejs的实现]]></title>
    <link href="http://beforeload.github.io/2013/04/28/content-syndication-with-node.js/"/>
    <id>http://beforeload.github.io/2013/04/28/content-syndication-with-node.js/</id>
    <published>2013-04-28T02:16:15.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="[翻译]Content_Syndication_with_Node-js">[翻译]Content Syndication with Node.js</h3>
<hr>
<p>原文链接 <a href="http://howtonode.org/content-syndication-with-node" target="_blank">Content Syndication with Node.js</a></p>
<p>对于任何一个想和其他系统信息共享的网站而言，网络聚合是必须的。建议最好去了解一下RSS或者Atom之类的消息来源标准的格式规范，如果不采用一个处理这种格式的模块，生成这样的文本信息会是一件非常麻烦且耗时的工作。非常感谢<a href="https://npmjs.org/" target="_blank">NPM</a>，正由于nodejs的包管理工具的强大之处，自从有了它，再也不用担心生成自己的消息来源会耗费大量时间了。</p>
<a id="more"></a>

<h4 id="安装feed包">安装feed包</h4>
<p>  在开始之前，进入你的项目文件夹下，安装feed的最新版本</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$npm</span> install feed
</pre></td></tr></table></figure>

<h4 id="建立订阅">建立订阅</h4>
<p>第一步：建立一个Feed(用来接收该信息来源更新的接口)的对象。当我们初始化这个对象的时候，提供我们网络聚合订阅的基本信息（这句话感觉怎么翻译怎么不通顺，我觉得就是根据我们了解的RSS或者Atom之类的格式，结合自己的网站提供相应信息）。如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="comment">// 需求的包</span>
varFeed<span class="subst">=</span><span class="keyword">require</span>(<span class="string">'feed'</span>);

<span class="comment">// 初始化feed对象</span>
<span class="built_in">var</span> feed <span class="subst">=</span>newFeed({
  title:          <span class="string">'My Feed Title'</span>,
  description:    <span class="string">'This is my personnal feed!'</span>,
  <span class="keyword">link</span>:           <span class="string">'http://example.com/'</span>,
  image:          <span class="string">'http://example.com/logo.png'</span>,
  copyright:      <span class="string">'Copyright © 2013 John Doe. All rights reserved'</span>,

  author:{
    name:       <span class="string">'John Doe'</span>,
    email:      <span class="string">'john.doe@example.com'</span>,
    <span class="keyword">link</span>:       <span class="string">'https://example.com/john-doe'</span>
  }
});
</pre></td></tr></table></figure>

<p>第二步：你可能希望区分自己的订阅专题。RSS和Atom标准格式都提供了一个或多个分类。当然，添加它们也超级简单：</p>
<p><code>feed.category(&#39;Node.js&#39;);
feed.category(&#39;JavaScript&#39;);</code></p>
<p>第三步：每个订阅都需要至少一个项目。（最好是一个入口）要做到这一点，你必须使用这些功能项目并提供合适的对象。当然，当你正在运行一个内容网站（就像你的博客），很可能发生的情况是你有多个项目。为了填充你的订阅信息，使用一个for循环，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>for(var key <span class="keyword">in</span> posts){
  feed<span class="preprocessor">.item</span>({
    title:  posts[key]<span class="preprocessor">.title</span>,
    link:  posts[key]<span class="preprocessor">.link</span>,
    description: posts[key]<span class="preprocessor">.description</span>,
    date: posts[key]<span class="preprocessor">.date</span>
  }
}
</pre></td></tr></table></figure>

<p>到这一步，生成RSS或者Atom标准的订阅的一切准备都已经OK了，使用下面的render方法</p>
<p><code>var output = feed.render()</code></p>
<p>这是含蓄的方式调用render请求。默认的是，它会渲染成RSS标准的订阅。你也可以使用这种含蓄的方式，选择RSS或者Atom</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">// Rendering a RSS 2.0 valid feed</span>
feed.<span class="keyword">render</span>(<span class="string">'rss-2.0'</span>);

<span class="comment">// Rendering an Atom 1.0 valid feed</span>
feed.<span class="keyword">render</span>(<span class="string">'atom-1.0'</span>);
</pre></td></tr></table></figure>

<p>是的，就是这么简单！</p>
<p>feed结合 Express.js 一起会变得超级简单。告诉你一个使用app.get()方法去路由/rss路径。为了推送你的订阅，像我们之前提到的那样渲染我们的订阅。然后，把Content-type 设置成 text/xml：</p>
<figure class="highlight JavaScript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
</pre></td><td class="code"><pre>app.get(<span class="string">'/rss'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req, res)</span>{</span>
  <span class="comment">// Initializing feed object</span>
  <span class="keyword">var</span> feed =newFeed({
    title:          <span class="string">'My Feed Title'</span>,
    description:    <span class="string">'This is my personnal feed!'</span>,
    link:           <span class="string">'http://example.com/'</span>,
    image:          <span class="string">'http://example.com/logo.png'</span>,
    copyright:      <span class="string">'Copyright © 2013 John Doe. All rights reserved'</span>,

    author:{
      name:       <span class="string">'John Doe'</span>,
      email:      <span class="string">'john.doe@example.com'</span>,
      link:       <span class="string">'https://example.com/john-doe'</span>
    }
  });

  <span class="comment">// Function requesting the last 5 posts to a database. This is just an</span>
  <span class="comment">// example, use the way you prefer to get your posts.</span>
  Post.findPosts(<span class="function"><span class="keyword">function</span><span class="params">(posts, err)</span>{</span>
    <span class="keyword">if</span>(err)
      res.send(<span class="string">'404 Not found'</span>,<span class="number">404</span>);
    <span class="keyword">else</span>{
      <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> posts){
        feed.item({
          title:          posts[key].title,
          link:           posts[key].url,
          description:    posts[key].description,
          date:           posts[key].date
        });
      }
      <span class="comment">// Setting the appropriate Content-Type</span>
      res.set(<span class="string">'Content-Type'</span>,<span class="string">'text/xml'</span>);

      <span class="comment">// Sending the feed as a response</span>
      res.send(feed.render(<span class="string">'rss-2.0'</span>));
    }
  });
});
</pre></td></tr></table></figure>


<h3 id="总结：">总结：</h3>
<p>就这样了，现在人们终于可以从你的nodejs应用中读取订阅你的项目。</p>
<p>译者：其实到这个地方还没有结束，本人在处理这个问题时感觉远远不想大神说的那么easy。有兴趣的最好自己尝试一下。</p>
<p>wrapper —— 包<br>feed —— 订阅<br>Feed —— 用来接收该信息来源更新的接口</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Translate/" term="Translate"/>
    <category scheme="http://beforeload.github.io/tags/Node.js/" term="Node.js"/>
    <category scheme="http://beforeload.github.io/categories/Node.js/" term="Node.js"/>
  </entry>
</feed>
