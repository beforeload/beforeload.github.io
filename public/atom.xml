<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[beforeload]]></title>
  <subtitle><![CDATA[对编程世界充满激情的少年]]></subtitle>
  <link href="http://beforeload.github.io/atom.xml" rel="self"/>
  <link href="http://beforeload.github.io"/>
  <updated>2014-01-02T06:47:45.180Z</updated>
  <id>http://beforeload.github.io/</id>
  <author>
    <name><![CDATA[beforeload]]></name>
    <email><![CDATA[fe.daniel91@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Vim Powerline installation on Ubuntu 13.10]]></title>
    <link href="http://beforeload.github.io/2014/01/02/vim-powerline-installation-on-ubuntu-1310/"/>
    <id>http://beforeload.github.io/2014/01/02/vim-powerline-installation-on-ubuntu-1310/</id>
    <published>2014-01-02T04:53:58.000Z</published>
    <updated>2014-01-02T06:47:22.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-5728-Ubuntu_13-10-4e0a-5b89-88c5-vim-powerline">在Ubuntu 13.10上安装vim-powerline</h1>
<p> 最近又重装了一次ubuntu，发现在ubuntu上每次都要去找<code>vim-powerline</code>的安装及配置太麻烦，而Ubuntu上的字体每次都需要使用fontpather打一次补丁，不然<code>let g:Powerline_symbols = &#39;fancy&#39;</code>没有效果，下面的箭头无法显示出来。所以整理这篇博客，记录配置过程的一些问题和解决方法。</p>
<img src="http://i.stack.imgur.com/T6APG.png" title="Vim Powerline Normal">

<img src="http://i.stack.imgur.com/4R3XS.png" title="Vim Powerline Insert">

<img src="http://i.stack.imgur.com/VTB31.png" title="Vim Powerline Visual">

<img src="http://i.stack.imgur.com/HhgMo.png" title="Vim Powerline Replace">


<a id="more"></a>

<h2 id="-4e00-3001-5b89-88c5-Powerline">一、安装Powerline</h2>
<ol>
<li>首先安装python-pip和git:</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">sudo</span> <span class="comment">apt</span><span class="literal">-</span><span class="comment">get</span> <span class="comment">install</span> <span class="comment">python</span><span class="literal">-</span><span class="comment">pip</span> <span class="comment">git</span>
</pre></td></tr></table></figure>

<ol>
<li>安装Powerline</li>
</ol>
<p>分两种情况：<br>1) 对于个人用户</p>
<p>在控制台中运行：</p>
<pre><code><span class="comment">pip</span> <span class="comment">install</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">user</span> <span class="comment">git</span><span class="literal">+</span><span class="comment">git://github</span><span class="string">.</span><span class="comment">com/Lokaltog/powerline</span>
</code></pre><p>修改<code>~/.profile</code>，将<code>~/.local/bin</code>加到<code>$PATH</code>中，在末尾加上：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="keyword">if</span> [ <span class="operator">-d</span> <span class="string">"<span class="variable">$HOME</span>/.local/bin"</span> ]; <span class="keyword">then</span>
    PATH=<span class="string">"<span class="variable">$HOME</span>/.local/bin:<span class="variable">$PATH</span>"</span>
<span class="keyword">fi</span>
</pre></td></tr></table></figure>

<p>2) 对于系统用户</p>
<p>在控制台中运行：</p>
<pre><code><span class="comment">su</span> <span class="literal">-</span><span class="comment">c</span> <span class="comment">'pip</span> <span class="comment">install</span> <span class="comment">git</span><span class="literal">+</span><span class="comment">git://github</span><span class="string">.</span><span class="comment">com/Lokaltog/powerline'</span>
</code></pre><h2 id="-4e8c-3001-5b57-4f53-7684-5b89-88c5-">二、字体的安装</h2>
<p>对于Ubuntu的用户来说，安装字体再简单不过了，只需要双击文件，点击Install即可。这里不在赘述。</p>
<p>不过，我发现从<a href="https://github.com/Lokaltog/powerline-fonts" target="_blank">powerline-fonts</a>上下载的字体不能直接用，还是需要配置，配置过程如下：</p>
<ol>
<li><p>Fontconfig：(推荐)</p>
<p> sudo apt-get install fontforge<br> sudo apt-get install fontforge-python</p>
</li>
</ol>
<p>1) 对于个人用户</p>
<pre><code>mkdir -p ~/<span class="preprocessor">.fonts</span>/ &amp;&amp; cd ~/<span class="preprocessor">.fonts</span>/
wget https://github<span class="preprocessor">.com</span>/Lokaltog/powerline/raw/develop/font/PowerlineSymbols<span class="preprocessor">.otf</span> 
wget https://raw<span class="preprocessor">.github</span><span class="preprocessor">.com</span>/Lokaltog/powerline-fonts/master/SourceCodePro/Sauce%<span class="number">20</span>Code%<span class="number">20</span>Powerline%<span class="number">20</span>Black<span class="preprocessor">.otf</span>
~/<span class="preprocessor">.vim</span>/bundle/vim-powerline/fontpatcher/fontpatcher *<span class="preprocessor">.otf</span>
mkdir -p ~/<span class="preprocessor">.config</span>/fontconfig/conf<span class="preprocessor">.d</span>/ cd ~/<span class="preprocessor">.config</span>/fontconfig/conf<span class="preprocessor">.d</span>/ 
wget https://github<span class="preprocessor">.com</span>/Lokaltog/powerline/raw/develop/font/<span class="number">10</span>-powerline-symbols<span class="preprocessor">.conf</span>
fc-cache -vf ~/<span class="preprocessor">.fonts</span>
</code></pre><p>2) 对于系统用户</p>
<pre><code>wget https://github<span class="preprocessor">.com</span>/Lokaltog/powerline/raw/develop/font/PowerlineSymbols<span class="preprocessor">.otf</span>
wget https://raw<span class="preprocessor">.github</span><span class="preprocessor">.com</span>/Lokaltog/powerline-fonts/master/SourceCodePro/Sauce%<span class="number">20</span>Code%<span class="number">20</span>Powerline%<span class="number">20</span>Black<span class="preprocessor">.otf</span>
wget https://github<span class="preprocessor">.com</span>/Lokaltog/powerline/raw/develop/font/<span class="number">10</span>-powerline-symbols<span class="preprocessor">.conf</span>
/etc/vim/bundle/vim-powerline/fontpatcher/fontpatcher *<span class="preprocessor">.otf</span>
sudo mv *<span class="preprocessor">.otf</span> /usr/share/fonts/
sudo fc-cache -vf
sudo mv <span class="number">10</span>-powerline-symbols<span class="preprocessor">.conf</span> /etc/fonts/conf<span class="preprocessor">.d</span>/
</code></pre><p>如果嫌麻烦，后面有我的打过补丁的字体可以直接下载使用。</p>
<h2 id="-4e09-3001-914d-7f6e-vimrc">三、配置.vimrc</h2>
<ol>
<li>Vim状态栏的配置</li>
</ol>
<p>在<code>~/.vimrc</code>或者<code>/etc/vim/vimrc</code>文件中进行配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="built_in">set</span> encoding<span class="subst">=</span>utf<span class="subst">-</span><span class="number">8</span>
<span class="built_in">set</span> fillchars<span class="subst">+=</span>stl:<span class="subst">\</span> ,stlnc:<span class="subst">\</span>
<span class="built_in">set</span> laststatus<span class="subst">=</span><span class="number">2</span>
<span class="built_in">set</span> rtp<span class="subst">+=</span><span class="variable">$HOME</span><span class="subst">/</span><span class="built_in">.</span><span class="built_in">local</span><span class="subst">/</span>lib<span class="subst">/</span>python2<span class="number">.7</span><span class="subst">/</span>site<span class="attribute">-packages</span><span class="subst">/</span>powerline<span class="subst">/</span>bindings<span class="subst">/</span>vim<span class="subst">/</span>
<span class="built_in">set</span> <span class="attribute">-g</span> default<span class="attribute">-terminal</span> <span class="string">"screen-256color"</span>
<span class="built_in">set</span> t_Co<span class="subst">=</span><span class="number">256</span>
<span class="keyword">let</span> g:Powerline_symbols <span class="subst">=</span> <span class="string">'fancy'</span>
</pre></td></tr></table></figure>

<p>后面附上我的vimrc相关配置。</p>
<h2 id="-56db-3001-5378-8f7d-">四、卸载</h2>
<p>1) 对于个人用户：</p>
<pre><code><span class="title">pip</span> uninstall powerline
</code></pre><p>2) 对于系统用户：</p>
<pre><code><span class="comment">su</span> <span class="literal">-</span><span class="comment">c</span> <span class="comment">'pip</span> <span class="comment">uninstall</span> <span class="comment">powerline'</span>
</code></pre><h3 id="-9644-4e0a-6211-7684-5b57-4f53-914d-7f6e-6587-4ef6-">附上我的字体配置文件</h3>
<ol>
<li><a href="https://github.com/beforeload/dotfiles/tree/master/fonts" target="_blank">字体</a></li>
<li><a href="https://raw.github.com/beforeload/dotfiles/master/.vimrc" target="_blank">.vimrc</a></li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/tags/Vim/" term="Vim"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Conclusions of 2013]]></title>
    <link href="http://beforeload.github.io/2014/01/01/conclusions-of-2013/"/>
    <id>http://beforeload.github.io/2014/01/01/conclusions-of-2013/</id>
    <published>2014-01-01T09:25:37.000Z</published>
    <updated>2014-01-01T12:07:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-5e74-7ec8-603b-7ed3-_-2014-2014-_-81f4-901d-53bb-7684-9752-6625-">年终总结 —— 致逝去的青春</h1>
<p>去年没有好好做过总结，今年自我感觉算是失败吧，那就写出来算是自我反省吧。</p>
<a id="more"></a>

<h2 id="-8ff7-832b-7684-5f00-7aef-">迷茫的开端</h2>
<p>年初，因为实验室项目的缘故，离开了点评实习的时光，脱离了熟悉的技术氛围，重新回到大学校园，各种迷茫，困惑的情绪历历在目。</p>
<p>自以为读研是在逃避社会，其实心里清楚逃避的不仅仅是社会，也是一种自我否定吧。没有直观的认知，现在想起来，每一步的选择，都付出了太多。不禁让我想起钱钟书《围城》。大学仿佛是一个笼子，笼子里的人是安逸的，舒适的，开学之前，可能希望回到学校，多点时间充充电，可惜回来之后却更向往忙碌而紧张的技术氛围。可能骨子里对编程技术，还是有点疯狂的追求吧。回到大学的我，开始排斥这样的生活，对于技术的爱好，以及安逸生活之间的矛盾，就这样一发不可收拾，13年的开头是失败的，我没有做好准备。</p>
<p>这样的情绪是消极的，我认识到这一点却没有想办法去改变它，我不应该去抱怨，不应该让消极的情绪影响到别人，2014年，我希望能够自信，积极的去做好每一件事情。</p>
<h2 id="-65e0-77e5-ff0c-53ef-601c-53ef-6068-">无知，可怜可恨</h2>
<p>知道的越多对未来越充满恐惧，而无知让我迷茫，每当自我感觉成熟一点，都会产生一种迷茫。回顾2013，竟然一本完整的技术书籍都没有仔细读完，而书桌上的新书，仿佛是一种嘲笑，心烦气躁却无奈叹息。希望2014年的愿景是多读点书，一切从头开始。</p>
<p>要去学习的东西总会很多，不能因为无知而不自知，无知的人是可怜的，但一定也是可恨的，要勇敢的迈出这一步，很多时候，都需要全身心的投入进去，只有这样收获才会和产出成正比。</p>
<p>不愿意再做一个无知的人，每天都期待有所收获。2014年，我希望每周都能读完一本技术类的书籍，看了很多小说，看了很多电影，也浪费了很多宝贵的时间，也许生活需要娱乐，但是绝对不能让娱乐占据生活。</p>
<h2 id="-4eba-751f-9700-8981-76ee-6807-">人生需要目标</h2>
<p>以前不理解这句话，感觉空的目标，虽然远大却毫无意义，大学的成长，伴随着很多驱动因素的消失，很多事情都取决于个人，由自己去做出选择。过去的一年我害怕选择，很多东西失去的便不会再来，而选错了那就一定要承担后果。这一年里，我参与过CoffeeScript书籍的翻译，学过Hadoop，做过并行程序开发，写过前端和Nodejs，在Coursera上学过一些课程，包括算法和Machine Learning，也和同学在Codeforces上刷过题。</p>
<p>在Coursera上每周跟进课程应该算2013年做过最有意义的事情，每当收获一张结课证书，都感到无比的兴奋。但是我只是在学习，没有过目标，没有思考过未来。进步可想而知是缓慢的。显而易见，在最后的两个月里，我几乎被实验室的项目缠的分不开心，github很长时间没有提交过代码，Coursera上也很长时间没有上过，最让我恶心的是每次看到复杂的Java代码，我都觉得深深的无力。</p>
<p>也许曾经有过目标，但是这一年里，目标早就不知抛到哪里去了。没有过迫切想去实现的目标，这也是我失败的缘由。2014，我希望能够实现我的每一个目标。</p>
<h2 id="-751f-6d3b-9700-8981-601d-8003-">生活需要思考</h2>
<p>总结过去的一年，我没有真正的去思考过。这也是每次都觉得绞尽脑汁的去思考业务，让我感到无比累的原因吧。不愿意去思考失败，便永远不会成功。<br>路就在脚下，关键是迈出这一步的勇气。2014年，我希望能够走的更远。</p>
<p>2013年，我用我的失败，与君共勉！<br>2014年，勇敢的面对，我决定不再逃避！</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Memory/" term="Memory"/>
    <category scheme="http://beforeload.github.io/categories/Memory/" term="Memory"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[A trick in python]]></title>
    <link href="http://beforeload.github.io/2013/10/28/a-trick-in-python/"/>
    <id>http://beforeload.github.io/2013/10/28/a-trick-in-python/</id>
    <published>2013-10-28T12:46:09.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-4e00-4e2a-8ba9-6211-60ca-8bb6-7684-8f6c-6362-">一个让我惊讶的转换</h2>
<p>今天写python，无意中发现一次打印的结果让我甚是惊讶！</p>
<p>废话不多说，见源码：</p>
<script src="https://gist.github.com/7196281.js?file=amazing_convert.py"></script>


<a id="more"></a>

<p><strong>打印结果如下：</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="literal">-</span><span class="comment">40</span><span class="string">.</span><span class="comment">0</span> <span class="literal">-</span><span class="comment">39</span>
<span class="literal">-</span><span class="comment">40</span> <span class="literal">-</span><span class="comment">40</span>
<span class="literal">-</span><span class="comment">1</span> <span class="literal">-</span><span class="comment">39</span> <span class="literal">-</span><span class="comment">39</span>
<span class="literal">-</span><span class="comment">1</span> <span class="comment">dollars</span> <span class="comment">and</span> <span class="literal">-</span><span class="comment">39</span> <span class="comment">cents</span>
</pre></td></tr></table></figure>

<p>惊讶的发现<code>cents</code>打印出来是-39,竟然不是-40！<br>而<code>int(-40.0)</code>结果是-40</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Python/" term="Python"/>
    <category scheme="http://beforeload.github.io/categories/Python/" term="Python"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Introduction to Machine Learning]]></title>
    <link href="http://beforeload.github.io/2013/10/19/introduction-to-machine-learning/"/>
    <id>http://beforeload.github.io/2013/10/19/introduction-to-machine-learning/</id>
    <published>2013-10-19T12:25:13.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-673a-5668-5b66-4e60-7b80-4ecb-">机器学习简介</h2>
<h3 id="-4e00-3001-5b9a-4e49-">一、定义</h3>
<blockquote>
<p>Arthur Samuel (1959): Machine Learning: Field of study that gives computers the ability to learn without being explicitly programmed.<br>Tom Mitchell (1998) : Well-posed Learning Problem: A computer program is said to learn from experience E with respect to some task T and some performance measure P, if its performance on T, as measured by P, improves with experience E.</p>
</blockquote>
<a id="more"></a>

<p>个人理解，一句话就是不通过明确的编程让机器具有学习能力，以垃圾邮件为例：</p>
<ol>
<li>邮件分为垃圾邮件和非垃圾邮件为任务T；</li>
<li>查看哪些邮件被标记为垃圾邮件，以及哪些标记为非垃圾邮件是经验E；</li>
<li>正确识别垃圾邮件或非垃圾邮件比例（或数量）为P。</li>
</ol>
<h3 id="-4e8c-3001-673a-5668-5b66-4e60-7b97-6cd5-7684-7c7b-578b-">二、机器学习算法的类型</h3>
<p>(1) 监督学习(Supervised learning)</p>
<ol>
<li>概念： 通过生成一个函数将输入映射为一个合适的输出（通常也称为标记，多数情况下训练集都是有人工专家标注生成的）。</li>
<li>理解： 通过分好类的输入，模拟出一个函数，以预测相应的结果产生的概率。</li>
<li>问题： 分类问题（Classification）和回归问题（Regression）<ul>
<li>分类问题： 离散型（如预测乳腺癌良性、恶性还有预测明天下午5点会不会下雨），预测的离散输出值(0, 1)。</li>
<li>回归问题： 连续型（如预测房屋价格），预测结果为连续的输出值。</li>
</ul>
</li>
<li>案例：<ul>
<li>Given genetic (DNA) data from a person, predict the odds of him/her developing diabetes over the next 10 years.</li>
<li>Given 50 articles written by male authors, and 50 articles written by female authors, learn to predict the gender of a new manuscript’s author (when the identity of this author is unknown).</li>
</ul>
</li>
</ol>
<p>(2) 无监督学习(Unsupervised learning)</p>
<ol>
<li>概念： 与有监督学习相比，训练集没有人为标注的结果。</li>
<li>理解： 对输入的训练集没有进行标注，即不告诉你分类情况，让机器自己进行相应的分类，即无监督学习常见算法聚类。</li>
<li>案例： Google News， 基因序列分析，社会网络分析，市场切分等。</li>
<li>特别的例子： 鸡尾酒宴会。<ul>
<li>鸡尾酒问题算法： [W,s,v] = svd((repmat(sum(x.<em>x,1),size(x,1),1).</em>x)*x’);</li>
</ul>
</li>
</ol>
<p>(3) 半监督学习</p>
<p>介于监督学习与无监督学习之间。</p>
<p>(4) 强化学习(Reinforcement learning)</p>
<p>通过观察来学习如何做出动作，每个动作都会对环境有所影响，而环境的反馈又可以引导该学习算法。</p>
<p>(5) 其他</p>
<p>还有其他包括推荐系统，Transduction，Learning to learn等类型。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Machine Learning/" term="Machine Learning"/>
    <category scheme="http://beforeload.github.io/categories/Machine Learning/" term="Machine Learning"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Know your PC]]></title>
    <link href="http://beforeload.github.io/2013/10/08/know-your-pc/"/>
    <id>http://beforeload.github.io/2013/10/08/know-your-pc/</id>
    <published>2013-10-08T04:00:39.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-4f60-7684-7535-8111-ff0c-4f60-4e86-89e3-591a-5c11-ff1f-">你的电脑，你了解多少？</h1>
<p>写这篇博客的原因是，我在使用Linux到现在位置还不知道怎么样去查找电脑相关信息，受到Coursera上<a href="https://class.coursera.org/pkuic-001" target="_blank">Introduction to Computing 计算概论A</a>课程启发，学习同时分享一下自己查看电脑信息的相关命令和过程。</p>
<a id="more"></a>

<h3 id="Q1-3a-_-5173-4e8e-CPU">Q1: 关于CPU</h3>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="title">cat</span> /<span class="keyword">proc</span>/cpuinfo   # 指令 <span class="number">1</span>

<span class="title">lscpu</span>               # 指令 <span class="number">2</span>
</pre></td></tr></table></figure>

<ol>
<li>处理器品牌 model name <code>cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</code></li>
<li>工作频率 指令1得到的cpu MHz是当前工作的频率，指令2得到的cpu MHz是系统可以达到的工作频率</li>
<li>处理器核心数 cpu cores</li>
<li>一级缓存大小 cat /sys/devices/system/cpu/cpu0/cache/index1/size</li>
<li>二级缓存大小 cat /sys/devices/system/cpu/cpu0/cache/index2/size</li>
<li>三级缓存大小 cat /sys/devices/system/cpu/cpu0/cache/index3/size</li>
<li>支持的指令集 flags</li>
</ol>
<h3 id="Q2-3a-_-5173-4e8e-5185-5b58-">Q2: 关于内存</h3>
<ol>
<li>内存品牌</li>
<li>内存类型</li>
<li>内存大小</li>
<li>内存条数量</li>
<li>最高工作频率</li>
<li>工作电压</li>
<li>内存延迟</li>
</ol>
<h3 id="Q3-3a-_-5173-4e8e-663e-793a-5668-">Q3: 关于显示器</h3>
<ol>
<li>显示器类型(CRT/LCD?)</li>
<li>色彩数</li>
<li>屏幕比例(x:y)</li>
<li>最高分辨率(x*y)</li>
<li>响应时间(ms)</li>
<li>点距(mm)</li>
</ol>
<h3 id="Q4-3a-_-5173-4e8e-786c-76d8-">Q4: 关于硬盘</h3>
<ol>
<li>硬盘品牌</li>
<li>硬盘大小</li>
<li>硬盘技术类型</li>
<li>硬盘接口类型</li>
<li>数据传输率</li>
<li>硬盘转速</li>
</ol>
<p>很多东西我也不知道怎么查，简单总结一下，竟然发现一个电脑有这么多东西不知道的，用了三年的电脑，实在是不敢说对自己电脑了解多深呀！</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[My pale National Day Holidays]]></title>
    <link href="http://beforeload.github.io/2013/10/07/my-pale-national-day-holidays/"/>
    <id>http://beforeload.github.io/2013/10/07/my-pale-national-day-holidays/</id>
    <published>2013-10-07T14:11:51.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-60e8-6de1-7684-56fd-5e86-8282-">惨淡的国庆节</h2>
<p>真是惨不忍睹！</p>
<p>我容易吗我？打了几百字结果由于更新了一些hexo版本，结果报错给我回归了版本，最后才发现原来是theme没有更新，这个国庆在最后一天也不让我好过！第一次在自己的博客里吐槽，实在是忘不了jBPM5在这个国庆假日给我带来的痛。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Memory/" term="Memory"/>
    <category scheme="http://beforeload.github.io/categories/Memory/" term="Memory"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Install JBPM 5.4]]></title>
    <link href="http://beforeload.github.io/2013/09/03/install-jbpm54/"/>
    <id>http://beforeload.github.io/2013/09/03/install-jbpm54/</id>
    <published>2013-09-03T14:49:38.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="JBPM5-4-73af-5883-642d-5efa-">JBPM5.4环境搭建</h2>
<h3 id="Step_1-3a-_-51c6-5907-5de5-4f5c-">Step 1: 准备工作</h3>
<ol>
<li>下载JDK，安装配置Java环境</li>
<li>下载Ant，配置Java自动化脚本引擎</li>
</ol>
<a id="more"></a>

<p><strong>备注:</strong></p>
<ol>
<li>Linux的JDK安装可以参考我的另外<a href="http://beforeload.github.io/2013/06/29/building-distributed-systems-development-environment/">一篇博文</a></li>
<li>Windows的安装可以参考<a href="http://www.cnitblog.com/intrl/archive/2009/04/11/56254.aspx" target="_blank">这里</a></li>
</ol>
<h3 id="Step_2-3a-_-4e0b-8f7d-JBPM_5-4-5b89-88c5-76f8-5173-5f00-53d1-5de5-5177-">Step 2: 下载JBPM 5.4安装相关开发工具</h3>
<ol>
<li>下载<a href="http://softlayer-dal.dl.sourceforge.net/project/jbpm/jBPM%205/jbpm-5.4.0.Final/jbpm-5.4.0.Final-installer-full.zip" target="_blank">jbpm-5.4.0.Final-installer-full.zip</a></li>
<li><p>解压缩，从控制台(Windows用户是command)进入相应文件夹下，然后输入命令</p>
<p> ant install.demo</p>
</li>
</ol>
<p>这个过程是下载Eclipse, Jboss等工具，自动化构建开发环境。</p>
<p>备注： 之所以选择这样的构建方式，是因为不想在环境搭建上浪费太多时间，以便拥有更多的时间投入JBPM5的学习开发过程中。</p>
<h3 id="Step_3-3a-_-6d4b-8bd5-73af-5883-662f-5426-642d-5efa-6210-529f-">Step 3: 测试环境是否搭建成功</h3>
<ol>
<li><p>启动JBPM</p>
<p> ant start.demo</p>
</li>
</ol>
<p>在控制中可以看到相关的启动情况，会看到自动化的启动了若干组件。</p>
<ol>
<li>重点是测试JBoss启动</li>
</ol>
<p>在控制台输入<a href="http://localhost:8080/，会看到Jboss启动的情况，大致应该如下所示：" target="_blank">http://localhost:8080/，会看到Jboss启动的情况，大致应该如下所示：</a></p>
<img src="http://i.minus.com/iHKyfjT9AxDg8.png">


<ol>
<li>Web管理控制台</li>
</ol>
<p>打开浏览器，输入<a href="http://localhost:8080/jbpm-console，重点看一下" target="_blank">http://localhost:8080/jbpm-console，重点看一下</a></p>
<p>登录的用户名、密码均为krisv </p>
<ol>
<li>使用Guvnor仓库和设计 </li>
</ol>
<p>输入如下地址可以进入</p>
<p><a href="http://localhost:8080/drools-guvnor" target="_blank">http://localhost:8080/drools-guvnor</a></p>
<p>最后，视频演示请戳<a href="http://people.redhat.com/kverlaen/install-gwt-console-jbpm.swf" target="_blank">这里</a></p>
<h3 id="-53c2-8003-535a-6587-ff1a-">参考博文：</h3>
<ol>
<li><a href="http://wanglu271991027.iteye.com/blog/1495799" target="_blank">jbpm5.2学习———安装与配置</a></li>
<li><a href="http://www.cnblogs.com/skyme/archive/2011/11/07/2238782.html" target="_blank">JBPM5.1的介绍</a></li>
<li><a href="http://w26.iteye.com/blog/998431" target="_blank">jBPM5 入门</a></li>
<li><a href="http://blog.chinaunix.net/uid-122937-id-3731868.html" target="_blank">Jbpm5安装</a></li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/tags/Ubuntu/" term="Ubuntu"/>
    <category scheme="http://beforeload.github.io/tags/Java/" term="Java"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[I am always so busy]]></title>
    <link href="http://beforeload.github.io/2013/09/01/i-am-always-so-busy/"/>
    <id>http://beforeload.github.io/2013/09/01/i-am-always-so-busy/</id>
    <published>2013-09-01T14:39:13.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-4ec0-4e48-90fd-4e0d-60f3-653e-5f03-">什么都不想放弃</h2>
<p>还是放不下太多，想多学点，再多学点，努力，再努力点。就是这样！</p>
<a id="more"></a>

<h2 id="-6211-4e0d-5e94-8be5-5410-69fd-">我不应该吐槽</h2>
<p>之前焦虑的生活，让我总在一些不论合不合适的场合下吐槽，我知道这样不好，但是习惯了这样排解压力，所以不可避免的会产生一些不好的影响。不过Java还是不可避免的给我带来了极大的痛苦。</p>
<h2 id="Just_Code_your_life">Just Code your life</h2>
<p>我觉得做一个程序员，就一直写下去就好，不要思考太多无法解决的问题，把有限的精力放在优先级更高的事情上，生活过的会更加积极主动！</p>
<p>最近喜欢上在Coursera上刷刷课程，在Codeforces上刷刷算法题目，写写python，js，偶尔还写写C程序，想学的东西太多，关注Machine Learing，喜欢分布式计算，也爱前端开发。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Memory/" term="Memory"/>
    <category scheme="http://beforeload.github.io/categories/Memory/" term="Memory"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Too young too simple]]></title>
    <link href="http://beforeload.github.io/2013/08/22/too-young-too-simple/"/>
    <id>http://beforeload.github.io/2013/08/22/too-young-too-simple/</id>
    <published>2013-08-22T15:57:37.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-4e00-4e2a-83dc-9e1f-7a0b-5e8f-5458-7684-603b-7ed3-4e0e-5c55-671b-">一个菜鸟程序员的总结与展望</h2>
<p><strong><em>写在前面的话：虽然还是一名学生，但我以一名优秀的程序员为目标要求自己。</em></strong></p>
<a id="more"></a>

<h3 id="-6211-8fd8-662f-592a-5e74-8f7b-4e86-">我还是太年轻了</h3>
<p>决定写这篇博客的时候，才深深意识到自己还是太年轻了。大学四年都没有真正明白自己真的想要什么样的生活，或者说想过目标却没想过去实现它。这是悲剧的，非常悲剧的。曾经虚度那么多时间，得到的除了一时的安逸之外，就是深深的愧疚。大学四年染上了不少的坏习惯，有过通宵看过小说，上课也看，逃课玩游戏，也挂过科。很多门课都不知道哪个老师讲的，更不知道讲了什么东西。现在才意识到这是多么残忍而可怕呀！很多时候都感觉，曾经的我给我留下的只有不堪和悔恨！</p>
<h3 id="-505a-70b9-6709-6210-5c31-611f-7684-4e8b-60c5-">做点有成就感的事情</h3>
<p>有想过希望什么样的生活，也非常希望能够得到很多人的关注与承认。但是应该怎么做，对人生对自己迷茫，非常迷茫。也在zhihu上问过这样的问题:<a href="http://www.zhihu.com/question/20760217" target="_blank">怎样戒骄戒躁，明确学习目标，提高自己的积极性，保证良好的执行力？</a>现在想想，不管别人怎么说，怎么做，关键还是在于自己应该怎么行动。所以我开始每天让自己过的稍微充实一点，至少搞点有成就感的事情。慢慢的我发现这个方法很管用，就这样我找到了第一份实习工作，在大众点评网的前端开发。</p>
<p>刚学HTML+CSS的时候，我感觉这玩意太easy了。就这么有成就感的学了一点前端知识，竟然让我有幸进入公司实习，不得不说这是一点点小幸运。于是我开始学习，心里只有一个念头，就是想得到他们的认可。</p>
<p>我发现一个很重要的事实，当一个人在某个领域，或者说某个方面感觉很有成就感的时候，他会非常希望和迫切的去获得更大的成就感，就好比人总是贪婪和不容易满足的。不过我就是这样的人，在实习阶段，真的让我有种迫切学习的欲望。很有压力也很开心的那段日子。</p>
<h3 id="-627e-5230-5b66-4e60-7684-4f19-4f34-">找到学习的伙伴</h3>
<p>对自己的女朋友，我鼓励她去完成她没有自信去完成的目标，但是对自己，想要实现一些目标，但我却一点自信都没有。可笑的是我还自以为是。学习这种东西，一个人学习的时候，总是孤独而胆怯的。窃以为，如果身边有志同道合的朋友，那对自己的帮助真的太大了。三人行必有我师焉！古人诚不欺我！</p>
<p>很一些同学交流之后才发现，原来很多同学也想找到伙伴。组队刷题什么的最有爱了不是吗？于是我在github上建了一个Bantor的Team，想和别人一起刷题。也参加了一些Coursera的课程，收获颇多。更开心的是，时刻有来自全球的伙伴和你同台竞技，交流经验，幸福感油然而生！</p>
<h3 id="-5fc3-7684-5f3a-5927-624d-662f-771f-7684-5f3a-5927-">心的强大才是真的强大</h3>
<p>现在该操心的不是该看什么小说，不是该玩什么游戏，也不是该怎么计划生活，而是在你的伙伴身边行动起来，获得别人的尊重就要收获比别人更多的东西。</p>
<p>一个人不能脆弱，身边有为同样目标奋斗的伙伴时，人便不会再迷茫，不会再浮躁。安静而强大的内心凝聚的是你生命的力量，每个人都可以用它来实现任何目标和理想。</p>
<h3 id="-672a-6765-4f55-53bb-4f55-4ece-">未来何去何从</h3>
<p>现在的自己迫切的需要磨练自己的技艺。未来的自己呢？</p>
<p>把自己的目光放的长远些，当你感到压力与迫不及待想去实现的动力的时候，还会缺乏执行力吗？</p>
<p>我的目标是：明年，我想找到自己理想的实习工作。</p>
<p>谢谢来自很多朋友的鼓励与支持。希望你们能够收获自己的成功！</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Memory/" term="Memory"/>
    <category scheme="http://beforeload.github.io/categories/Memory/" term="Memory"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[The Fundamentals Knowledge of Python]]></title>
    <link href="http://beforeload.github.io/2013/08/20/the-fundamentals-knowledge-of-python/"/>
    <id>http://beforeload.github.io/2013/08/20/the-fundamentals-knowledge-of-python/</id>
    <published>2013-08-19T18:19:22.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Python_-57fa-7840-77e5-8bc6-">Python 基础知识</h2>
<p>简介：这是对Coursera上的<a href="https://class.coursera.org/programming1-002/class" target="_blank">Learn to Program: The Fundamentals</a>第一周课程的一次总结。 </p>
<p><a id="more"></a></p>
<blockquote>
<p>第一点： 作为计算器使用</p>
</blockquote>
<ol>
<li>加减乘除和其他语言的运算符号相同；</li>
<li>两个符号<ul>
<li>// 整除符号(可对应模除符号 % 记忆)</li>
<li>** 求幂(乘方)</li>
</ul>
</li>
<li>两种数据类型<ul>
<li>int: 整型</li>
<li>float: 浮点型（近似数）</li>
</ul>
</li>
<li>符号优先级<ul>
<li>**最高</li>
<li>-负数</li>
<li>*,/,//,%</li>
<li>+,- 加减运算</li>
</ul>
</li>
<li>语法和语义</li>
<li>错误<ul>
<li>例如输入<code>3) + 2 * 4</code>， 执行时会报出语法错误(SyntaxError)</li>
<li>例如输入<code>89.0 / 0</code>， 执行时会报<code>ZeroDivisionError: float division by zero</code></li>
</ul>
</li>
</ol>
<blockquote>
<p>第二点： Python 和计算机内存</p>
</blockquote>
<p><strong>计算机内存：</strong></p>
<p>  计算机内存中，内存地址指向存储的数据。我们会在地址前加上前缀’id’（例如，id201代表内存地址201）。备注：Python中可以通过id方法去查看内存地址，该方法返回一个整型数。help(id)</p>
<p>在内存中，变量是存储值的一种方法。变量命名指代的是内存中的地址，Python在相对于值之外的一个独立的list中存储变量。一个变量容纳内存中的地址，而这个地址容纳对应的值(value)。因此，这个变量映射到这个值。</p>
<p><strong>术语:</strong></p>
<ol>
<li>A value has a memory address. 一个值有一个内存地址</li>
<li>A variable contains a memory address. 一个变量容纳一个内存地址</li>
<li>A variable refers to a value.一个变量映射一个值</li>
<li>A variable points to a value.一个变量指向一个值</li>
</ol>
<blockquote>
<p>第三点： 变量</p>
</blockquote>
<pre><code><span class="title">variable</span> = expression
</code></pre><p><strong>赋值语句：</strong></p>
<p>执行赋值语句的规则是：</p>
<ol>
<li>执行表达式，它会产生一个内存地址；</li>
<li>存储内存地址到一个变量。</li>
</ol>
<p><strong>变量名：</strong></p>
<p>Python合法的变量名规则是：</p>
<ol>
<li>名字以字母或_开头；</li>
<li>名字必须只包含字母，数字和下划线_。</li>
</ol>
<p>对于Python，大多数场景下，约定俗成的使用凹槽方式pothole_case。</p>
<blockquote>
<p>第四点：内置函数</p>
</blockquote>
<p><strong>函数调用：</strong></p>
<pre><code><span class="function"><span class="title">function_name</span><span class="params">(arguments)</span></span>
</code></pre><p>术语：</p>
<ul>
<li>Argument: 形参</li>
<li>Pass: 传递</li>
<li>Call: 调用</li>
<li>Return: 返回结果</li>
</ul>
<p><strong>Function dir</strong></p>
<p>Python有一系列内置的函数。运行<code>dir(__builtins__)</code>可以查看内置的函数列表。</p>
<p><strong>Function help</strong></p>
<p>为了得到某个函数的具体信息，可以调用help方法，将函数名作为参数，如下：</p>
<pre><code>&gt;&gt;&gt; help(abs)
Help on built-<span class="keyword">in</span> <span class="function"><span class="keyword">function</span> <span class="title">abs</span> <span class="title">in</span> <span class="title">module</span> <span class="title">builtins</span>:
<span class="title">abs</span><span class="params">(...)</span>
    <span class="title">abs</span><span class="params">(number)</span> -&gt; <span class="title">number</span>

        <span class="title">Return</span> <span class="title">the</span> <span class="title">absolute</span> <span class="title">value</span> <span class="title">of</span> <span class="title">the</span> <span class="title">argument</span>.</span>
</code></pre><p><strong>可选参数</strong></p>
<p>例如在pow函数中[, z]表示z参数可选。</p>
<pre><code>&gt;&gt;&gt; help(pow)
<span class="type">Help</span> on built-<span class="keyword">in</span> function pow <span class="keyword">in</span> <span class="module"><span class="keyword">module</span> builtins:

pow<span class="container">(...)</span>
    pow<span class="container">(<span class="title">x</span>, <span class="title">y</span>[, <span class="title">z</span>])</span> -&gt; number

        With two arguments, equivalent to x**y.  With three arguments,
            equivalent to <span class="container">(<span class="title">x</span>**<span class="title">y</span>)</span> % z, but may be more efficient <span class="container">(<span class="title">e</span>.<span class="title">g</span>. <span class="title">for</span> <span class="title">longs</span>)</span>.</span>
</code></pre><blockquote>
<p>第五点：函数</p>
</blockquote>
<p><strong>函数定义：</strong></p>
<pre><code><span class="function"><span class="keyword">def</span> <span class="title">function_name</span><span class="params">(parameters)</span>:</span>
    body
</code></pre><p><strong>执行return语句过程：</strong></p>
<ol>
<li>执行语句的表述，产生一个内存地址；</li>
<li>将内存地址传递给调用者，结束函数。</li>
</ol>
<p><strong>执行函数调用的过程：</strong></p>
<ol>
<li>求实参的值，产生内存地址；</li>
<li>存储内存地址到对应的形参；</li>
<li>执行函数体。</li>
</ol>
<p><strong>保存程序到”.py”文件中:</strong></p>
<p>我们通常将Python程序保存到”.py”文件中。一个文件可以包含多个函数定义以及一些其他语句表述。调用”.py”文件的函数之前，要先运行这个模块，否则IDLE的shell解释器不会识别这个函数调用。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Python/" term="Python"/>
    <category scheme="http://beforeload.github.io/categories/Python/" term="Python"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[The Master Method]]></title>
    <link href="http://beforeload.github.io/2013/07/21/the-master-method/"/>
    <id>http://beforeload.github.io/2013/07/21/the-master-method/</id>
    <published>2013-07-21T02:53:44.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<p>T(n) &lt;= aT(n/b) + O(n<sup>d</sup>)</p>
<p>T(n) = O(n<sup>d</sup>logn) if a = b<sup>d</sup> (Case 1)</p>
<p>T(n) = O(n<sup>d</sup>) if a &lt; b<sup>d</sup> (Case 2)</p>
<p>T(n) = O(n<sup>log<sub>b</sub>a</sup>) if a &gt; b<sup>d</sup> (Case 3)</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Algorithm/" term="Algorithm"/>
    <category scheme="http://beforeload.github.io/tags/Math/" term="Math"/>
    <category scheme="http://beforeload.github.io/categories/Algorithm/" term="Algorithm"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Summary of Distributed Computing Learning Resourses]]></title>
    <link href="http://beforeload.github.io/2013/07/11/summary-of-distribute-computing-learning-resourses/"/>
    <id>http://beforeload.github.io/2013/07/11/summary-of-distribute-computing-learning-resourses/</id>
    <published>2013-07-11T13:01:59.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-5206-5e03-5f0f-8ba1-7b97-76f8-5173-8d44-6e90-603b-7ed3-">分布式计算相关资源总结</h2>
<h3 id="-8bba-6587-">论文</h3>
<p>首先是论文，强烈建议看英文原版，那些翻译的还是敬而远之吧！</p>
<blockquote>
<p>Google出品，必属精品！</p>
</blockquote>
<a id="more"></a>

<h4 id="-56db-5927-7ecf-5178-8bba-6587-28-5fc5-770b-29-">四大经典论文(必看)</h4>
<ol>
<li><p>The Anatomy of a Large-Scale Hypertextual Web Search Engine</p>
<p>分布式计算的奠基制作，介绍了Google搜索引擎的原型，讲解了一个基于超文本的大型系统建立过程。</p>
</li>
<li><p>The Google File System</p>
<p>GFS这篇论文已然成为分布式文件系统相关技术的一种标准。对于分布式应用的接口，分布式系统设计，<br>数据的存储以及分布式系统监控和管理相关的技术实现具有指导意义。</p>
</li>
<li><p>MapReduce: Simplified Data Processing on Large Clusters</p>
<p>MapReduce的奠基之作，就凭它提出了MapReduce编程模式，就必须要读这篇论文。通过它，可以初窥云计算的世界。<br>Google在四位数以上的个节点上运行MapReduce，并且还在持续扩展中。</p>
</li>
<li><p>BigTable: A Distributed Storage System for Structured Data.</p>
<p>这篇论文主要实现了分布式存储数据的结构化，Google Earth和网页索引都是基于BigTable实现。论文很清晰的讲解了BigTable的设计实现思路和方法。</p>
</li>
</ol>
<h4 id="-4e09-7bc7-8865-5145-8bba-6587-28-63a8-8350-770b-29-">三篇补充论文(推荐看)</h4>
<ol>
<li><p>Dynamo</p>
<p>Google原始之作！</p>
</li>
<li><p><a href="http://www.sosp2007.org/papers/sosp064-aguilera.pdf" target="_blank">Sinfonia: A New Paradigm for Building Scalable Distributed Systems</a></p>
<p>阐述构建分布式文件系统的范式方法。淘宝构建TFS，OceanBase和Tair等系统的时候充分参考了这篇论文！</p>
</li>
<li><p><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/zh-CN//archive/chubby-osdi06.pdf" target="_blank">The Chubby lock service for loosely-coupled distributed systems</a></p>
<p>Google的BigTable，MapReduce和Spanner服务都是在这个基础上构建的！分布式事务的基础，我正在看这篇论文。</p>
</li>
<li><p><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/es//archive/spanner-osdi2012.pdf" target="_blank">Spanner: Google’s Globally-Distributed Database</a></p>
</li>
</ol>
<p>第一个全球意义上的分布式数据库，推荐它的其中一个原因是，我完全看不懂！！！</p>
<h4 id="-5176-4ed6-8bba-6587-">其他论文</h4>
<p>这里还有一份别人总结的<a href="http://duanple.blog.163.com/blog/static/709717672011330101333271/" target="_blank">分布式系统领域经典论文翻译集</a>。</p>
<p><strong><em>论文来源和下载：</em></strong></p>
<p>大多数论文来源于OSDI上。可以直接去会议网站上下载。直接google scholar一下，也可以下载。</p>
<h3 id="-4e66-7c4d-">书籍</h3>
<h4 id="-5206-5e03-5f0f-8ba1-7b97-">分布式计算</h4>
<ol>
<li><a href="http://book.douban.com/subject/3108801/" target="_blank">分布式系统原理与范型</a></li>
<li><a href="http://book.douban.com/subject/2698938/" target="_blank">分布式系统概念与设计</a></li>
</ol>
<h4 id="Hadoop">Hadoop</h4>
<ol>
<li><p>《Hadoop in action》、 《Hadoop实战》</p>
<p>我看的第一本分布式计算的书，里面的内容有点老。入门的书籍，所以推荐的时候难免掺杂了感情分。</p>
</li>
<li><p>《Oreilly.Hadoop.The.Definitive.Guide.2nd.Edition 》</p>
<p>中文版本就不推荐了，直接看英文版的吧！</p>
</li>
<li><p>《Hadoop权威指南》</p>
</li>
</ol>
<p>这本书同样适合初学者，书里面有基础的实例实现。属于分布式计算方面少数可以看的中文书。<br>翻译的比较成功的两本书！当然看原版更好！</p>
<h4 id="-5176-4ed6-4e66-7c4d-">其他书籍</h4>
<ol>
<li>《推荐系统实践》</li>
<li>《集体智慧编程》</li>
</ol>
<h3 id="-5176-4ed6-Hadoop-6559-7a0b-">其他Hadoop教程</h3>
<ol>
<li>《深入浅出Hadoop实战开发30讲》</li>
<li>《Hadoop应用开发实战 28讲》</li>
<li>《Cloudera Hadoop 4系列实战课程40讲》</li>
</ol>
<h3 id="-603b-7ed3-">总结</h3>
<p>学习分布式计算，建议先去研究一下分布式计算的理论知识，然后学习一种框架，以Hadoop为例，从入门到精通！</p>
<ol>
<li><p>环境搭建</p>
<p><a href="http://beforeload.github.io/2013/06/29/building-distributed-systems-development-environment/">基于Hadoop的分布式系统开发环境在Ubuntu 13.04中的搭建</a></p>
</li>
<li><p>MapReduce</p>
<p><a href="http://beforeload.github.io/2013/04/13/analyze-mapreduce/">MapReduce</a></p>
</li>
<li><p>Hadoop的一点应用</p>
<ul>
<li><a href="http://beforeload.github.io/2013/04/06/hdfs-java-api/">理解 Hadoop 的 Java API</a></li>
<li><a href="http://beforeload.github.io/2013/04/18/invertedindex-in-hadoop/">倒排索引</a></li>
</ul>
</li>
</ol>
<p>看论文和书籍只是一部分，懂理论才算刚刚入门！要努力做到能应用还要争取有创新！</p>
<p>另外, Hadoop不代表分布式，还有很多类似于Hadoop且比Hadoop更具有优势的框架，如Spark就更适合实验室内的研究的小规模分布式系统，Storm更适用于实时数据流。</p>
<p>附： </p>
<ol>
<li><a href="http://aoyouzi.iteye.com/blog/1845235" target="_blank">推荐系统公共资源汇总</a></li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Distributed Computing/" term="Distributed Computing"/>
    <category scheme="http://beforeload.github.io/tags/Hadoop/" term="Hadoop"/>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/categories/Distributed Computing/" term="Distributed Computing"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Building Distributed Systems Development Environment]]></title>
    <link href="http://beforeload.github.io/2013/06/29/building-distributed-systems-development-environment/"/>
    <id>http://beforeload.github.io/2013/06/29/building-distributed-systems-development-environment/</id>
    <published>2013-06-28T17:13:47.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-57fa-4e8e-Hadoop-7684-5206-5e03-5f0f-7cfb-7edf-5f00-53d1-73af-5883-5728-Ubuntu_13-04-4e2d-7684-642d-5efa-">基于Hadoop的分布式系统开发环境在Ubuntu 13.04中的搭建</h2>
<p>由于实验学习以及开发测试的需求，需要安装集群和伪分布式开发环境。</p>
<p>分为以下安装过程：</p>
<ol>
<li>安装jdk</li>
<li>安装eclipse</li>
<li>安装hadoop</li>
</ol>
<a id="more"></a>

<h3 id="-5b89-88c5-jdk">安装jdk</h3>
<p><strong>(1) 下载JDK</strong></p>
<p>Ubuntu上下载最好不要使用FTP下载，不然会出现例如下面的问题。</p>
<pre><code><span class="attribute">gzip</span>: <span class="attribute">stdin</span>: invalid compressed data--format <span class="attribute">violatedtar</span>: Unexpected EOF <span class="keyword">in</span> <span class="attribute">archivetar</span>: Unexpected EOF <span class="keyword">in</span> <span class="attribute">archivetar</span>: Error <span class="keyword">is</span> <span class="keyword">not</span> <span class="attribute">recoverable</span>: exiting now
</code></pre><p>从<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank">官网</a>上根据自己的系统下载相应的JDK。</p>
<pre><code><span class="comment">sudo</span> <span class="comment">mkdir</span> <span class="comment">/usr/java</span>
<span class="comment">tar</span> <span class="comment">zxvf</span> <span class="comment">jdk</span><span class="literal">-</span><span class="comment">7u25</span><span class="literal">-</span><span class="comment">linux</span><span class="literal">-</span><span class="comment">x64</span><span class="string">.</span><span class="comment">tar</span><span class="string">.</span><span class="comment">gz</span>
<span class="comment">sudo</span> <span class="comment">mv</span> <span class="comment">jdk</span><span class="literal">-</span><span class="comment">7u25</span><span class="literal">-</span><span class="comment">linux</span><span class="literal">-</span><span class="comment">x64</span><span class="string">.</span><span class="comment">tar</span><span class="string">.</span><span class="comment">gz</span> <span class="comment">/usr/java/</span>
</code></pre><p><strong>(2) 然后修改配置文件</strong></p>
<pre><code><span class="built_in">sudo</span> vi /etc/profile
</code></pre><p>按G可以直接到文件尾端，填写下面内容:</p>
<pre><code><span class="keyword">export</span> JAVA_HOME=/usr/java/jdk1.<span class="number">7.0</span>_25
<span class="keyword">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre
<span class="keyword">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar
<span class="keyword">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin
</code></pre><p>保存退出。</p>
<p><strong>(3) 检测是否成功</strong> </p>
<pre><code><span class="title">source</span> /etc/profile
<span class="title">java</span> -version
</code></pre><p>如果显示下面结果，表示安装成功。</p>
<pre><code><span class="comment">java</span> <span class="comment">version</span> <span class="comment">"1</span><span class="string">.</span><span class="comment">7</span><span class="string">.</span><span class="comment">0_25"</span>
<span class="comment">Java(TM)</span> <span class="comment">SE</span> <span class="comment">Runtime</span> <span class="comment">Environment</span> <span class="comment">(build</span> <span class="comment">1</span><span class="string">.</span><span class="comment">7</span><span class="string">.</span><span class="comment">0_25</span><span class="literal">-</span><span class="comment">b15)</span>
<span class="comment">Java</span> <span class="comment">HotSpot(TM)</span> <span class="comment">64</span><span class="literal">-</span><span class="comment">Bit</span> <span class="comment">Server</span> <span class="comment">VM</span> <span class="comment">(build</span> <span class="comment">23</span><span class="string">.</span><span class="comment">25</span><span class="literal">-</span><span class="comment">b01</span><span class="string">,</span> <span class="comment">mixed</span> <span class="comment">mode)</span>
</code></pre><h3 id="-5b89-88c5-eclipse">安装eclipse</h3>
<p><strong>(1) 下载eclipse<em>*</em>.tar.gz</strong></p>
<pre><code><span class="comment">tar</span> <span class="comment">zxvf</span> <span class="comment">eclipse</span><span class="literal">-</span><span class="comment">standard</span><span class="literal">-</span><span class="comment">kepler</span><span class="literal">-</span><span class="comment">R</span><span class="literal">-</span><span class="comment">linux</span><span class="literal">-</span><span class="comment">gtk</span><span class="literal">-</span><span class="comment">x86_64</span><span class="string">.</span><span class="comment">tar</span><span class="string">.</span><span class="comment">gz</span>
<span class="comment">mv</span> <span class="comment">eclipse</span> <span class="comment">/usr/local</span>
<span class="comment">/usr/local/eclipse/eclipse</span>    <span class="comment">#启动eclipse</span>
</code></pre><p><strong>(2) 通过修改快捷键，可以迅速启动eclipse</strong></p>
<pre><code><span class="comment">System</span> <span class="comment">Settings</span> <span class="literal">-</span>&gt; <span class="comment">Keyboard</span> <span class="literal">-</span>&gt; <span class="comment">Shortcuts</span> <span class="literal">-</span>&gt; <span class="comment">Custom</span> <span class="comment">Shortcuts</span>
</code></pre><p><strong><em>在弹窗中输入：</em></strong></p>
<pre><code><span class="attribute">Name</span>: <span class="string">eclipse</span>
<span class="attribute">Command</span>: <span class="string">/usr/local/eclipse/eclipse</span>
</code></pre><p>Apply退出后，<code>Ctrl+Alt+E</code>，添加快捷键。以后只需要通过<code>Ctrl+Alt+E</code>，即可启动Eclipse。</p>
<h4 id="ssh_-65e0-5bc6-7801-767b-5f55-">ssh 无密码登录</h4>
<p><strong>(1) 安装SSH</strong></p>
<pre><code><span class="comment">sudo</span> <span class="comment">apt</span><span class="literal">-</span><span class="comment">get</span> <span class="comment">install</span> <span class="comment">openssh</span><span class="literal">-</span><span class="comment">server</span>
</code></pre><p>如果你想让别的机器访问自己的电脑，只需要把公钥告诉别人，其他机器通过public key加密后，把数据传到自己的机器上，自己的机器用私钥进行解密。</p>
<p><strong>(2) 生成密钥的步骤也很简单：</strong></p>
<pre><code><span class="comment">ssh</span><span class="literal">-</span><span class="comment">keygen</span> <span class="literal">-</span><span class="comment">t</span> <span class="comment">rsa</span> <span class="literal">-</span><span class="comment">C</span> <span class="comment">"your_email@example</span><span class="string">.</span><span class="comment">com"</span>
</code></pre><p>详细步骤请参见<a href="//help.github.com/articles/generating-ssh-keys">Generating SSH Keys</a></p>
<pre><code><span class="keyword">cp</span> id_rsa<span class="preprocessor">.pub</span> authorized_keys
</code></pre><p><strong>(3) 测试一下，是否可以无密码连接</strong></p>
<pre><code><span class="title">ssh</span> localhost
</code></pre><p>集群配置的时候可以直接从namenode中，把新增的电脑上的public key发到namenode中，添加到它的authorized_keys中，<br>然后使用<code>scp</code>命令拷贝到新增机器上即可。</p>
<h4 id="-5b89-88c5-Hadoop">安装Hadoop</h4>
<p><strong>(1) 下载解压hadoop</strong></p>
<pre><code>tar zxvf hadoop-<span class="number">0.20</span><span class="number">.2</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>    <span class="preprocessor">#解压</span>
</code></pre><p><strong>(2) 配置四个文件</strong></p>
<p>1) ~/hadoop-0.20.2/conf/hadoop-env.sh</p>
<pre><code><span class="keyword">export</span> JAVA_HOME=/usr/java/jdk1.<span class="number">7.0</span>_25
</code></pre><p>2) ~/hadoop-0.20.2/conf/core-site.xml</p>
<pre><code><span class="tag">&lt;<span class="title">configuration</span>&gt;</span> 
  <span class="tag">&lt;<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><p>3) ~/hadoop-0.20.2/conf/hdfs-site.xml</p>
<pre><code><span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
  <span class="tag">&lt;<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">value</span>&gt;</span>1<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><p>4) ~/hadoop-0.20.2/conf/mapred-site.xml</p>
<pre><code><span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
  <span class="tag">&lt;<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">value</span>&gt;</span>localhost:9001<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><p><strong>(3) 修改～/.bashrc</strong></p>
<pre><code><span class="title">echo</span> '<span class="keyword">export</span> <span class="type">HADOOP_HOME</span>=/home/beforeload/hadoop-<span class="number">0.20</span><span class="number">.2</span>' &gt;&gt; ~/.bashrc
<span class="title">echo</span> '<span class="keyword">export</span> <span class="type">PATH</span>=$<span class="type">PATH</span>:$<span class="type">HADOOP_HOME</span>/bin' &gt;&gt; ~/.bashrc
<span class="title">source</span> ~/.bashrc
</code></pre><p>现在在任何目录下，都可以输入hadoop命令了。</p>
<p><strong>(4) 格式化HDFS并启动hadoop</strong></p>
<pre><code><span class="title">hadoop</span> namenode -format
<span class="title">start</span>-all.sh
<span class="title">jps</span>   #查看运行的进程
</code></pre><p><strong>(5) 浏览NameNode 和 JobTracker</strong></p>
<ol>
<li>NameNode <a href="http://localhost:50070/dfshealth.jsp" target="_blank">http://localhost:50070/dfshealth.jsp</a></li>
<li>JobTracker <a href="http://localhost:50030/jobtracker.jsp" target="_blank">http://localhost:50030/jobtracker.jsp</a></li>
</ol>
<p><strong>(6) 重要参数</strong></p>
<pre><code><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span>     
<span class="built_in">echo</span> <span class="variable">$HADOOP_HOME</span>
</code></pre>]]></content>
    <category scheme="http://beforeload.github.io/tags/Ubuntu/" term="Ubuntu"/>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/tags/Hadoop/" term="Hadoop"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Building Webapps with Yeoman]]></title>
    <link href="http://beforeload.github.io/2013/06/28/building-webapps-with-yeoman/"/>
    <id>http://beforeload.github.io/2013/06/28/building-webapps-with-yeoman/</id>
    <published>2013-06-28T14:11:40.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-4f7f-7528-Yeoman_-5feb-901f-6784-5efa-Web-5e94-7528-">使用Yeoman 快速构建Web应用</h2>
<h4 id="-7b80-4ecb-">简介</h4>
<p>Yeoman不仅仅是一个应用。它也是一个工作流，一个工具集。</p>
<p>相关介绍参见<a href="http://yeoman.io/" target="_blank">官网文档</a>。</p>
<a id="more"></a>

<p>它由三个组件组成：</p>
<ol>
<li>Yo 脚手架工具：我理解成项目工程目录和文件生成工具。用来构建生产环境和生成编译环境。</li>
<li>Grunt 构建工具：主要用来构建，预览和测试你的项目。</li>
<li>Bower 包管理工具：处理包依赖关系，不需要手动下载管理脚本。可以理解成前端的NPM。</li>
</ol>
<p><strong>协作关系图：</strong></p>
<img src="//images.cnitblog.com/blog/39469/201303/09214923-27fe6dea6eb34f468e601589ea83a675.png" class="[yo-grunt-bower]">


<p>从上面流水线一样的协作图，可以看出一个项目产品的生成可以做到很规范化，从而提高生成效率。</p>
<p>我觉得在说应用之前，先要思考一下使用Yeoman的场景，如果是我们负责一个项目，思考一下如下的问题：</p>
<ol>
<li>项目目录是怎样的？</li>
<li>需要用到哪些类库？</li>
<li>(基于PHP和基于Node.js)生产环境是怎样的？</li>
<li>如果使用CoffeeScript/sass/less，又需要增加什么样的编译环境？</li>
<li>单元测试要如何进行？</li>
<li>调试环境是怎么样的？</li>
<li>打包部署要遵循什么样的流程？</li>
<li>…</li>
</ol>
<p>这些问题不能很好的解决，项目开发中都会存在或多或少的效率问题。</p>
<p>其实，解决他们很简单，yeoman提供方便快捷的解决方法，下面简单介绍一下如何构建一个项目。</p>
<h3 id="-5b89-88c5-5b83-">安装它</h3>
<p>第一步：首先确认拥有Node.js, Ruby的环境。</p>
<p>最好安装一下 Compass(Sass的工具库)</p>
<pre><code><span class="built_in">sudo</span> gem install compass
</code></pre><p>如果想了解一下Compass，推荐阮一峰的一篇<a href="http://www.ruanyifeng.com/blog/2012/11/compass.html" target="_blank">博文</a>。</p>
<p>第二步：然后安装三个组件</p>
<pre><code><span class="comment">sudo</span> <span class="comment">npm</span> <span class="comment">install</span> <span class="literal">-</span><span class="comment">g</span> <span class="comment">yo</span> <span class="comment">grunt</span><span class="literal">-</span><span class="comment">cli</span> <span class="comment">bower</span>
</code></pre><p>第三步：安装网络应用生成器</p>
<p>选择web app生成器：</p>
<pre><code><span class="comment">sudo</span> <span class="comment">npm</span> <span class="comment">install</span> <span class="literal">-</span><span class="comment">g</span> <span class="comment">generator</span><span class="literal">-</span><span class="comment">webapp</span>
</code></pre><p>也可以选择安装AngularJS生成器：</p>
<pre><code><span class="built_in">sudo</span> npm install -g generator-angular  <span class="comment"># install generator</span>
</code></pre><h3 id="-5feb-901f-6784-5efa-">快速构建</h3>
<p>由于上面web应用生成器有两种，所以可以通过两种不同的方式构建我们的项目：</p>
<p>第一种：使用<code>yo webapp</code>方式</p>
<pre><code>yo webapp                     <span class="comment"># 搭建项目骨架</span>
bower <span class="keyword">install</span> underscore      <span class="comment"># 依赖通过bower安装</span>
grunt                         <span class="comment"># 构建测试发布环境</span>
</code></pre><p>第二种：使用<code>yo angular</code>方式</p>
<pre><code><span class="title">yo</span> angular                    # 搭建项目骨架
<span class="title">bower</span> install angular-ui      # 依赖通过bower安装
<span class="title">grunt</span> test                    # 测试
<span class="title">grunt</span> server                  # 预览
<span class="title">grunt</span>  
</code></pre><h3 id="-603b-7ed3-">总结</h3>
<p>通过以上的步骤，我们很容易的构建出了一个简易的web项目。yeoman有很多特性，例如可以自定义模板（如HTML5, Boilerplate, Twitter Bootstrap等），AMD（通过RequireJS）等其他工具。</p>
<p>自动编译CoffeeScript和Compass也是一大亮点，值得一提的是，yeoman提供了live reload功能，在对项目文件修改保存后，前端页面回自动刷新。</p>
<p>还有太多太多特性了，如jslint完善脚本，内置HTTP服务器，集成包管理，ES6的语法支持，PhantomJS单元测试等等。希望大家使用愉快。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Node.js/" term="Node.js"/>
    <category scheme="http://beforeload.github.io/categories/Node.js/" term="Node.js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[My Software Installation and Configuration on Ubuntu 13.04]]></title>
    <link href="http://beforeload.github.io/2013/06/22/my-software-installation-and-configuration-on-ubuntu-1304/"/>
    <id>http://beforeload.github.io/2013/06/22/my-software-installation-and-configuration-on-ubuntu-1304/</id>
    <published>2013-06-22T13:23:50.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-5728-Ubuntu_13-04-4e0a-5e38-7528-8f6f-4ef6-7684-5b89-88c5-914d-7f6e-">在Ubuntu 13.04上常用软件的安装配置</h2>
<p>安装完Ubuntu 13.04 后，我的一些软件安装和配置过程。</p>
<ol>
<li>安装zsh和oh-my-zsh</li>
<li>终端透明化</li>
<li>安装chrome</li>
<li>安装git</li>
<li>安装VLC播放器</li>
<li>安装fcitx + 搜狗拼音</li>
<li>安装vim</li>
<li>安装Node.js</li>
<li>安装锐捷校园网客户端</li>
<li>安装配置jdk</li>
</ol>
<a id="more"></a>

<h4 id="-5b89-88c5-zsh-548c-oh-my-zsh">安装zsh和oh-my-zsh</h4>
<p><strong><em>安装 curl:</em></strong></p>
<pre><code>su<span class="operator"><span class="keyword">do</span> apt-<span class="keyword">get</span> install curl</span>
</code></pre><p>然后:</p>
<pre><code>su<span class="operator"><span class="keyword">do</span> apt-<span class="keyword">get</span> install zsh</span>
</code></pre><p><strong><em>可以通过curl方式安装：</em></strong></p>
<pre><code><span class="comment">curl</span> <span class="literal">-</span><span class="comment">L</span> <span class="comment">https://github</span><span class="string">.</span><span class="comment">com/robbyrussell/oh</span><span class="literal">-</span><span class="comment">my</span><span class="literal">-</span><span class="comment">zsh/raw/master/tools/install</span><span class="string">.</span><span class="comment">sh</span> <span class="comment">|</span> <span class="comment">sh</span>
</code></pre><p><strong><em>也可以通过wget：</em></strong></p>
<pre><code><span class="comment">wget</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">no</span><span class="literal">-</span><span class="comment">check</span><span class="literal">-</span><span class="comment">certificate</span> <span class="comment">https://github</span><span class="string">.</span><span class="comment">com/robbyrussell/oh</span><span class="literal">-</span><span class="comment">my</span><span class="literal">-</span><span class="comment">zsh/raw/master/tools/install</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="comment">O</span> <span class="literal">-</span> <span class="comment">|</span> <span class="comment">sh</span>
</code></pre><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank">参考文档</a></p>
<h4 id="Ubuntu_-7ec8-7aef-900f-660e-5316-">Ubuntu 终端透明化</h4>
<p>Ctrl+Alt+T 打开终端，菜单 </p>
<pre><code>Edit-&gt;Profile Preference-&gt;Background-&gt;Transparent background
</code></pre><h4 id="-5b89-88c5-_chrome">安装 chrome</h4>
<p><strong><em>安装依赖:</em></strong></p>
<pre><code>su<span class="operator"><span class="keyword">do</span> apt-<span class="keyword">get</span> install libudev0</span>
</code></pre><p>然后从google chrome官方网站上下载安装</p>
<pre><code><span class="comment">sudo</span> <span class="comment">dpkg</span> <span class="literal">-</span><span class="comment">i</span> <span class="comment">google</span><span class="literal">-</span><span class="comment">chrome</span><span class="literal">-</span><span class="comment">stable_*</span><span class="string">.</span><span class="comment">deb</span>
</code></pre><p>终端输入<code>google-chrome</code>即可启动。</p>
<h4 id="-5b89-88c5-git">安装git</h4>
<pre><code>su<span class="operator"><span class="keyword">do</span> apt-<span class="keyword">get</span> install git</span>
</code></pre><p><strong><em>相关配置:</em></strong></p>
<pre><code>git config --<span class="keyword">global</span> <span class="transposed_variable">user.</span>name=beforeload
git config --<span class="keyword">global</span> <span class="transposed_variable">user.</span>email=<span class="transposed_variable">fe.</span>daniel91@<span class="transposed_variable">gmail.</span>com
git config --<span class="keyword">global</span> <span class="transposed_variable">color.</span>diff=auto
git config --<span class="keyword">global</span> <span class="transposed_variable">color.</span>branch=auto
git config --<span class="keyword">global</span> <span class="transposed_variable">color.</span>ui=true
git config --<span class="keyword">global</span> <span class="transposed_variable">color.</span>interactive=auto
git config --<span class="keyword">global</span> <span class="transposed_variable">color.</span>status=auto
git config --<span class="keyword">global</span> <span class="transposed_variable">push.</span>default=current
git config --<span class="keyword">global</span> <span class="transposed_variable">core.</span>editor=vim
git config --<span class="keyword">global</span> <span class="transposed_variable">core.</span>autocrlf=off
git config --<span class="keyword">global</span> <span class="transposed_variable">merge.</span>tool=vimdiff
</code></pre><h5 id="-67e5-770b-914d-7f6e-">查看配置</h5>
<p><strong><em>查看所有配置:</em></strong></p>
<pre><code><span class="comment">git</span> <span class="comment">config</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">list</span>
</code></pre><p><strong><em>查看某个配置:</em></strong></p>
<pre><code><span class="title">git</span> config user.name
</code></pre><p>或者 </p>
<pre><code><span class="title">cat</span> ~/.gitconfig
</code></pre><h4 id="-5b89-88c5-VLC-89c6-9891-64ad-653e-5668-">安装VLC视频播放器</h4>
<pre><code>su<span class="operator"><span class="keyword">do</span> apt-<span class="keyword">get</span> install vlc</span>
</code></pre><p>终端输入<code>vlc</code>启动，在菜单栏</p>
<pre><code><span class="comment">Tools</span><span class="literal">-</span>&gt; <span class="comment">Preference</span> <span class="literal">-</span>&gt; <span class="comment">Subtitles</span> <span class="comment">&amp;</span> <span class="comment">OSD</span> <span class="comment">修改Default</span> <span class="comment">encoding为Universal(UTF</span><span class="literal">-</span><span class="comment">8)</span>
</code></pre><p>还可以设置相关中文字体（中文可选）。</p>
<p>然后在右上角:</p>
<pre><code><span class="comment">System</span> <span class="comment">Settings</span> <span class="literal">-</span>&gt; <span class="comment">Details</span> <span class="literal">-</span>&gt; <span class="comment">Default</span> <span class="comment">Applications</span> <span class="literal">-</span>&gt; <span class="comment">Video选择VLC</span> <span class="comment">media</span> <span class="comment">player</span>
</code></pre><p>这样打开相关视频文件，可以直接使用VLC播放。</p>
<h4 id="-5b89-88c5-sougou_-2b-_fcitx">安装sougou + fcitx</h4>
<pre><code><span class="comment">sudo</span> <span class="comment">add</span><span class="literal">-</span><span class="comment">apt</span><span class="literal">-</span><span class="comment">repository</span> <span class="comment">ppa:fcitx</span><span class="literal">-</span><span class="comment">team/nightly</span>
<span class="comment">sudo</span> <span class="comment">apt</span><span class="literal">-</span><span class="comment">get</span> <span class="comment">update</span>
<span class="comment">sudo</span> <span class="comment">apt</span><span class="literal">-</span><span class="comment">get</span> <span class="comment">install</span> <span class="comment">fcitx</span><span class="literal">-</span><span class="comment">sogoupinyin</span>
</code></pre><p>然后在<code>System Settings -&gt; Language Support -&gt; Keyboard input method system</code> 中选择 fcitx。</p>
<p><strong><em>[可选]安装皮肤：</em></strong></p>
<p>下载<a href="http://pan.baidu.com/share/link?shareid=591450&amp;uk=4060302862" target="_blank">fcitx-sougou-skin</a></p>
<pre><code><span class="comment">sudo</span> <span class="comment">dpkg</span> <span class="literal">-</span><span class="comment">i</span> <span class="comment">fcitx</span><span class="literal">-</span><span class="comment">skin</span><span class="literal">-</span><span class="comment">sogou_0</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">2_all</span><span class="string">.</span><span class="comment">deb</span>
</code></pre><p>在fcitx外观中选择sougou即可。</p>
<p>最后注销，重新登录，输入法生效。</p>
<h4 id="-5b89-88c5-914d-7f6e-VIM">安装配置VIM</h4>
<pre><code>su<span class="operator"><span class="keyword">do</span> apt-<span class="keyword">get</span> install vim</span>
</code></pre><p><strong><em>配置：</em></strong></p>
<p>安装vundle</p>
<pre><code>git clone https://github<span class="preprocessor">.com</span>/gmarik/vundle<span class="preprocessor">.git</span> ~/<span class="preprocessor">.vim</span>/bundle/vundle
</code></pre><p>用<a href="https://github.com/beforeload/myconf/blob/master/.vimrc" target="_blank">我的.vimrc配置文件</a><br>覆盖<code>~/.vimrc</code>文件即可</p>
<p>在vim中执行<code>:BundleInstall</code>,自动安装vim插件。</p>
<p>Powerline中下面的箭头可能存在字体问题，解决的办法是给字体打补丁。</p>
<h4 id="-5b89-88c5-Node-js">安装Node.js</h4>
<p>安装依赖</p>
<pre><code><span class="comment">sudo</span> <span class="comment">apt</span><span class="literal">-</span><span class="comment">get</span> <span class="comment">install</span> <span class="comment">build</span><span class="literal">-</span><span class="comment">essential</span> <span class="comment">libssl</span><span class="literal">-</span><span class="comment">dev</span>
</code></pre><p>编译安装</p>
<pre><code><span class="title">mkdir</span> node &amp;&amp; cd node
<span class="title">git</span> clone https://github.com/joyent/node.git
./configure
<span class="title">make</span> 
<span class="title">make</span> install
</code></pre><h4 id="-5b89-88c5-9510-6377-6821-56ed-7f51-5ba2-6237-7aef-">安装锐捷校园网客户端</h4>
<p>下载<a href="http://ncs.hust.edu.cn/download/soft/Linux\ SU\ V1.01版.rar" target="_blank">Linux SU V 1.01</a></p>
<p>安装unrar</p>
<pre><code><span class="title">sudo</span> apt-get install unrar

<span class="title">unrar</span> ***.rar
<span class="title">tar</span> -zxvf ***.tar.gz

<span class="title">cd</span> rjsupplicant/
</code></pre><p>查看设置</p>
<pre><code><span class="built_in">sudo</span> ./rjsupplicant.sh -h
</code></pre><p>设置好后启动</p>
<pre><code><span class="built_in">sudo</span> ./rjsupplicant.sh
</code></pre><h4 id="-5b89-88c5-914d-7f6e-JDK">安装配置JDK</h4>
<p>相关安装步骤已经在另外<a href="//beforeload.github.io/2013/06/29/building-distributed-systems-development-environment/">一篇博文</a>中做出更新。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Ubuntu/" term="Ubuntu"/>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Storing Node application data]]></title>
    <link href="http://beforeload.github.io/2013/06/15/storing-node-application-data/"/>
    <id>http://beforeload.github.io/2013/06/15/storing-node-application-data/</id>
    <published>2013-06-15T12:52:00.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-6d45-6790-Node-js-5e94-7528-7684-6570-636e-5b58-50a8-">浅析Node.js应用的数据存储</h2>
<p>主要从以下三点简要分析</p>
<ol>
<li>内存和文件系统数据存储</li>
<li>传统的关系型数据库存储</li>
<li>非关系型数据库存储</li>
</ol>
<a id="more"></a>

<p>选择一种合适的数据存储机制主要依赖五个因素：</p>
<ol>
<li>存什么样的数据</li>
<li>数据读写的速度要求以满足足够的性能</li>
<li>多大规模的数据</li>
<li>数据查询方式</li>
<li>数据存储和保存的生命周期</li>
</ol>
<h3 id="Relational_Database">Relational Database</h3>
<ol>
<li>MySQL</li>
<li>Postgres</li>
</ol>
<h3 id="NoSQL_databases">NoSQL databases</h3>
<ol>
<li>Redis</li>
<li>MongoDB</li>
<li>Mongoose</li>
</ol>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Node.js/" term="Node.js"/>
    <category scheme="http://beforeload.github.io/categories/Node.js/" term="Node.js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[building PhoneGap development environment]]></title>
    <link href="http://beforeload.github.io/2013/06/12/building-phonegap-development-environment/"/>
    <id>http://beforeload.github.io/2013/06/12/building-phonegap-development-environment/</id>
    <published>2013-06-11T18:29:06.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Ubuntu_13-04_Android-5f00-53d1-57fa-672c-73af-5883-914d-7f6e-">Ubuntu 13.04 Android开发基本环境配置</h3>
<h4 id="-57fa-672c-73af-5883-">基本环境</h4>
<pre><code>sudo apt<span class="attribute">-get</span> install ia32<span class="attribute">-libs</span> <span class="variable">#64</span>位系统的<span class="number">32</span>位程序兼容库adb需要此库(<span class="number">32</span>位系统的当然略过此步骤)
sudo apt<span class="attribute">-get</span> install ant
</code></pre><a id="more"></a>

<h4 id="-5b89-88c5-72ec-7acb-SDK">安装独立SDK</h4>
<p>下载<a href="http://developer.android.com/sdk/index.html" target="_blank">SDK</a></p>
<pre><code>tar zxvf path<span class="subst">/</span><span class="keyword">to</span><span class="subst">/</span>android<span class="attribute">-sdk_r21</span><span class="number">.0</span><span class="number">.1</span><span class="attribute">-linux</span><span class="built_in">.</span>tgz <span class="attribute">-C</span> ~<span class="subst">/</span>DevTools
cd ~<span class="subst">/</span>DevTools<span class="subst">/</span>android<span class="attribute">-sdk</span><span class="attribute">-linux</span><span class="subst">/</span>tools<span class="subst">/</span>
<span class="built_in">.</span><span class="subst">/</span>android sdk
</code></pre><h4 id="-914d-7f6e-73af-5883-53d8-91cf-">配置环境变量</h4>
<p>在~/.bashrc或者/etc/environemnt</p>
<pre><code>export <span class="constant">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:~/DevTools/android-sdk-linux/tools/</span><span class="symbol">:~/DevTools/android-sdk-linux/platform-tools/</span>
</code></pre><h4 id="-6d4b-8bd5-">测试</h4>
<pre><code>android list targets    <span class="comment">#查看可用平台</span>
android create <span class="keyword">project</span> –t <span class="number">1</span> –n MyFirstApp –p ~/Development/android-<span class="keyword">project</span>/MyFirstApp –a MainActivity –k com.example.myfirstapp
android avd   <span class="comment">#点击New，选择一个设备创建模拟器，完了点击Start启动模拟器 </span>
cd ~/DevTools/android-<span class="keyword">project</span>/MyFirstApp
ant debug   <span class="comment">#debug模式打包</span>
adb <span class="keyword">install</span> bin/MyFirstApp-debug.apk    <span class="comment">#用adb安装到模拟器</span>
</code></pre><p>具体教程参见<a href="http://developer.android.com/training/basics/firstapp/index.html" target="_blank">Building Your First App</a></p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Linux/" term="Linux"/>
    <category scheme="http://beforeload.github.io/tags/Ubuntu/" term="Ubuntu"/>
    <category scheme="http://beforeload.github.io/tags/Android/" term="Android"/>
    <category scheme="http://beforeload.github.io/categories/Linux/" term="Linux"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Building Node web Applications]]></title>
    <link href="http://beforeload.github.io/2013/06/10/building-node-web-applications/"/>
    <id>http://beforeload.github.io/2013/06/10/building-node-web-applications/</id>
    <published>2013-06-10T10:10:49.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Node-js-7f51-7edc-5e94-7528-5f00-53d1-">Node.js网络应用开发</h2>
<ol>
<li>Handling HTTP requests with Node’s API</li>
<li>Building a RESTful web service</li>
<li>Serving static files</li>
<li>Accepting user input from forms</li>
<li>Securing your application with HTTPS</li>
</ol>
<a id="more"></a>

<p>Node.js网络应用开发的简单图示如下：</p>
<img src="http://i.minus.com/iLMAoN6C3pEtN.png">


<h3 id="HTTP_server_-7684-57fa-672c-9762-">HTTP server 的基本面</h3>
<h4 id="HTTP-8bf7-6c42-5728-Node_HTTP_server-4e2d-7684-751f-547d-5468-671f-">HTTP请求在Node HTTP server中的生命周期</h4>
<ol>
<li>HTTP 客户端（例如：浏览器）发送HTTP请求</li>
<li>Node进程接受到连接把请求的数据发送给HTTP server</li>
<li>Node进程把HTTP请求头完整解析，在’request’的回调事件中处理相应的逻辑</li>
<li>request的回调函数中体现应用的逻辑，例如产生一个response</li>
<li>请求通过HTTP server返回，这个过程会格式化成一个标准的HTTP response返回给客户端</li>
</ol>
<h3 id="Building_a_RESTful_web_service">Building a RESTful web service</h3>
<p>CURD: Creat, Update, Read, Delete<br>HTTP: Get, Post, Put, Delete</p>
<ol>
<li>使用POST创建资源</li>
<li>使用GET获取资源</li>
<li><p>使用DELETE删除资源</p>
<p> function(req, res){<br>   switch(req.method){<br>   case: ‘GET’: </p>
<pre><code> // to <span class="keyword">do</span>
 <span class="keyword">break</span>
</code></pre><p>   case: ‘POST’:</p>
<pre><code> // <span class="keyword">...</span>
 <span class="keyword">break</span>
</code></pre><p>   case: ‘DELETE’:</p>
<pre><code> // <span class="keyword">...</span>
 <span class="keyword">break</span>
</code></pre><p>   }<br> }</p>
</li>
</ol>
<h3 id="Serving_static_files">Serving static files</h3>
<ol>
<li>Get /index.html 用户向服务器请求一个静态文件</li>
<li>Node 服务器接受请求，应用的逻辑部分去读取这个文件</li>
<li>文件通过一个读取流的实例传递给服务器</li>
<li><p>文件的ReadStream通过’piped’拼接方式，以HTTP的response形式返回给客户端</p>
<p> …<br> var stream = fs.createReadStream(path)<br> // stream.on(‘data’, function(chunk){<br> //   res.write(chunk)<br> // })<br> // stream.on(‘end’, function(){<br> //   res.end()<br> // })<br> stream.pipe(res)<br> …</p>
</li>
</ol>
<p>相关的图片如下：</p>
<img src="http://i.minus.com/iOZW6WxLIsBNk.png">


<p>…<br>stream.pipe(res)<br>stream.on(‘error’,function(err){<br>  res.statusCode = 500<br>  res.end(‘Internal Server Error!’)<br>})<br>…</p>
<p>文件不存在错误处理”ENOENT, No such file or dictionary”</p>
<p>根据<code>fs.stat(path, function(err, stat){})</code>的err判断</p>
<h3 id="-63a5-53d7-7528-6237-8868-5355-63d0-4ea4-6570-636e-">接受用户表单提交数据</h3>
<ol>
<li>表单域</li>
<li>上传文件node-formidable</li>
<li>实时计算上传进度</li>
</ol>
<p>两种类型的表单提交</p>
<ul>
<li>“application/x-www-form-urlencoded”: the default for HTML forms</li>
<li>“multipart/form-data”: used when form contains files, non-ascii, or binary data</li>
</ul>
<p>node-formidable这个包可以帮助我们解决表单提交的绝大多数问题。<br>也可以计算伪实时的文件上传进度，如下所示：</p>
<pre><code>form.<span class="command"><span class="keyword">on</span>(<span class="string">'process'</span>, <span class="title">function</span>(<span class="title">bytesReceived</span>, <span class="title">bytesExpected</span>){</span>
    var percent = bytesReceived / bytesExpected * <span class="number">100</span>
    console.<span class="built_in">log</span>(percent)
})
</code></pre><p>剩下的就是将进度在前端页面上显示出来，利用如socket.io这样的实时模块可以轻松的搞定。我将在我的Repo: <a href="https://github.com/beforeload/node-upload" target="_blank">node-upload</a>中完成它。</p>
<h3 id="-4f7f-7528-HTTPS_-786e-4fdd-5e94-7528-7684-5b89-5168-6027-">使用HTTPS 确保应用的安全性</h3>
<p>生成一个私钥(加密)<br>    openssl genrsa 1024 &gt; key.pem</p>
<p>生成证书(解码)<br>    openssl req -x509 -new -key key.pem &gt; key-cert.pem</p>
<p><strong><em>HTTPS server选项</em></strong><br>    var https = require(‘https’)<br>      , fs = require(‘fs’)<br>      , options = {<br>        key: fs.readFileSync(‘./key.pem’),<br>        cert: fs.readFileSync(‘./key-cert.pem’)<br>      }</p>
<pre><code>https.createServer(options, <span class="function"><span class="keyword">function</span>(<span class="title">req</span>, <span class="title">res</span>){</span>
  res.writeHead(<span class="number">200</span>)
  res.<span class="function"><span class="keyword">end</span>('<span class="title">Hello</span> <span class="title">world</span>!')</span>
}).listen(<span class="number">4000</span>)
</code></pre><p>证书可以共享，它包括public key和持有者的身份信息。当然如果要发布一个网站，就需要在Certificate Authority(CA)上去注册，获取一个真实的，受信任的SSL证书。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Node.js/" term="Node.js"/>
    <category scheme="http://beforeload.github.io/categories/Node.js/" term="Node.js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Priority Queue]]></title>
    <link href="http://beforeload.github.io/2013/05/30/priority-queue/"/>
    <id>http://beforeload.github.io/2013/05/30/priority-queue/</id>
    <published>2013-05-29T16:40:13.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>以6.5-1的数据作为输入 实现heapsort, 以及图解排序过程 </li>
<li>实现6.5-3所描述的最小优先级队列接口, 分析各接口所需的时间复杂度 </li>
<li>练习6.5-8 </li>
</ol>
<a id="more"></a>

<p>6.5-1 HEAP-EXTRACT-MAX</p>
<pre><code><span class="keyword">if</span> head-<span class="built_in">size</span><span class="matrix">[A]</span> &lt; <span class="number">1</span>
    <span class="keyword">then</span> error
max &lt;-- A<span class="matrix">[<span class="number">1</span>]</span>
A<span class="matrix">[<span class="number">1</span>]</span> &lt;-- heap-<span class="built_in">size</span><span class="matrix">[A]</span> - <span class="number">1</span>
MAX-HEAPIFY(A, <span class="number">1</span>)
<span class="keyword">return</span> max
</code></pre><img src="http://i.minus.com/imDBy99LrOzWP.jpg">


<p>6.5-3 HEAP-MINIUM(A)</p>
<p>伪代码书上已经有了</p>
<pre><code><span class="function">HEAP-MINIMUM(A)</span>
    return <span class="tag">A</span><span class="attr_selector">[1]</span>
</code></pre><p>利用HEAP-EXTRACT-MAX(A)容易写出HEAP-EXTRACT-MIN(A)</p>
<h4 id="HEAP-EXTRACT-MIN-28-A-29-">HEAP-EXTRACT-MIN(A)</h4>
<pre><code><span class="keyword">if</span> heap-<span class="built_in">size</span><span class="matrix">[A]</span> &lt; <span class="number">1</span>
    <span class="keyword">then</span> error 
max &lt;- A<span class="matrix">[<span class="number">1</span>]</span>
A<span class="matrix">[<span class="number">1</span>]</span> &lt;- A<span class="matrix">[heap-size[A]</span>] - <span class="number">1</span>
heap-<span class="built_in">size</span><span class="matrix">[A]</span> &lt;- heap-<span class="built_in">size</span><span class="matrix">[A]</span> - <span class="number">1</span>
MIN-HEAPIFY(A, <span class="number">1</span>)
<span class="keyword">return</span> max
</code></pre><p>同样，由HEAD-INCREASE-KEY很容易就写出HEAD-DECREASE-KEY过程的伪代码：</p>
<h4 id="HEAD-DECREASE-KEY">HEAD-DECREASE-KEY</h4>
<pre><code><span class="keyword">if</span> key &gt; A<span class="matrix">[i]</span>
    then error
A<span class="matrix">[i]</span> &lt;- key
<span class="keyword">while</span> <span class="built_in">i</span> &gt; <span class="number">1</span> and A<span class="matrix">[PARENT(i)]</span> &gt; A<span class="matrix">[i]</span>
    do exchange A<span class="matrix">[i]</span> &lt;-&gt; A<span class="matrix">[PARENT(i)]</span>
            <span class="built_in">i</span> &lt;- PARENT(<span class="built_in">i</span>)
</code></pre><p>同样，由MAX-HEAP-INSERT容易写出MIN-HEAP-INSERT</p>
<h4 id="MIN-HEAP-INSERT">MIN-HEAP-INSERT</h4>
<pre><code><span class="comment">heap</span><span class="literal">-</span><span class="comment">size</span><span class="title">[</span><span class="comment">A</span><span class="title">]</span> &lt;<span class="literal">-</span> <span class="comment">heap</span><span class="literal">-</span><span class="comment">size</span><span class="title">[</span><span class="comment">A</span><span class="title">]</span> <span class="literal">+</span> <span class="comment">1</span>
<span class="comment">A</span><span class="title">[</span><span class="comment">heap</span><span class="literal">-</span><span class="comment">size</span><span class="title">[</span><span class="comment">A</span><span class="title">]</span><span class="title">]</span> &lt;<span class="literal">-</span> <span class="comment">无穷</span>
<span class="comment">HEAP</span><span class="literal">-</span><span class="comment">INCREASE</span><span class="literal">-</span><span class="comment">KEY(A</span><span class="string">,</span> <span class="comment">heap</span><span class="literal">-</span><span class="comment">size</span><span class="title">[</span><span class="comment">A</span><span class="title">]</span><span class="string">,</span> <span class="comment">key)</span>
</code></pre><p>6.5-8</p>
<p>每一个链表作为一个节点，链表的第一个元素作为key，然后组成一个堆，这个堆的大小为K(k个链表，k个节点)。</p>
<p>链表合并过程思路如下：</p>
<ol>
<li>通过堆的根节点，获得其链表的第一个元素</li>
<li>以获取的元素作为目标链表的尾端</li>
<li>因为根的第一个元素的key发生改变，对其进行MIN-HEAPFIY操作，递归进行下去。</li>
</ol>
<p>显然，在每个堆中取一个key组成的堆是实现此过程的一个最小堆。</p>
<p>具体的实现代码实在没有时间写了。</p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Algorithm/" term="Algorithm"/>
    <category scheme="http://beforeload.github.io/categories/Algorithm/" term="Algorithm"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Common Problems of Recommender Systems]]></title>
    <link href="http://beforeload.github.io/2013/05/27/common-problems-of-recommendation-systems/"/>
    <id>http://beforeload.github.io/2013/05/27/common-problems-of-recommendation-systems/</id>
    <published>2013-05-27T14:14:53.000Z</published>
    <updated>2014-01-01T08:26:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="-63a8-8350-7cfb-7edf-7684-5e38-89c1-95ee-9898-">推荐系统的常见问题</h3>
<h4 id="-7f3a-5c11-5927-6570-636e-95ee-9898-">缺少大数据问题</h4>
<p>Big data是推荐系统最关键的因素之一，对于推荐系统而言，可能最大的问题就是需要大规模的数据才能有效的进行推荐过程。这也毋庸置疑的表示那些拥有典型著名的推荐系统的公司恰恰是那些拥有大量消费者数据的公司：Google, Amazon, Netflix, Last.fm 。</p>
<a id="more"></a>

<h4 id="-51b7-542f-52a8-95ee-9898-">冷启动问题</h4>
<p>在推荐系统的冷启动问题中，最主要包括两个方面：新用户问题，新资源问题。</p>
<p>(1) 新用户问题</p>
<p>这部分用户在系统中没有资源浏览访问记录，系统无法根据该用户行为数据对其浏览行为进行资源访问的预测和推推荐。</p>
<p>(2) 新资源问题</p>
<p>该部分资源没有用户的访问记录，使得系统在做数据分析时无法将其纳入待处理数据中，进而无法向用户推荐该资源。</p>
<h4 id="-53d8-5316-6570-636e-95ee-9898-">变化数据问题</h4>
<p>推荐系统中的变化数据问题是指推荐系统中常常充斥着老的内容，新的数据资料等很难得到推荐。</p>
<h4 id="-53d8-5316-559c-597d-95ee-9898-">变化喜好问题</h4>
<p>在推荐系统中用户也许怀着不同的目的对于文件资源进行搜索浏览，及用户的喜好是变化跳跃的，系统很难对这种跳跃的喜好类别进行资源数据推荐。</p>
<h4 id="-53c2-8003-">参考</h4>
<p>(1) <a href="http://readwrite.com/2009/01/28/5_problems_of_recommender_systems" target="_blank">5 Problems of Recommender Systems</a><br>(2) <a href="http://www.resyschina.com/2010/03/five_problems_of_resys.html" target="_blank">推荐系统5大问题</a></p>
]]></content>
    <category scheme="http://beforeload.github.io/tags/Translate/" term="Translate"/>
    <category scheme="http://beforeload.github.io/tags/Distributed Computing/" term="Distributed Computing"/>
    <category scheme="http://beforeload.github.io/categories/Distributed Computing/" term="Distributed Computing"/>
  </entry>
</feed>
